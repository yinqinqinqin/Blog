<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unity—HDRP——1：Process（HDRP project setting）</title>
      <link href="/2024/07/11/Unity%E2%80%94HDRP--1%EF%BC%9AProcess%EF%BC%88HDRP%20project%20setting%EF%BC%89/"/>
      <url>/2024/07/11/Unity%E2%80%94HDRP--1%EF%BC%9AProcess%EF%BC%88HDRP%20project%20setting%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h1><ul><li><strong>Process（HDRP project setting）</strong></li><li>HDRP配置文件和Volume框架</li><li>HDRP Lighting System</li><li>LightMapping（光照烘培）</li><li>Material</li><li>PostProcessing</li><li>HDRPDebug</li><li>HDRP Real-Time Ray Tracing</li></ul><h1 id="Process（HDRP-project-setting）"><a href="#Process（HDRP-project-setting）" class="headerlink" title="Process（HDRP project setting）"></a>Process（HDRP project setting）</h1><h2 id="HDRP项目安装"><a href="#HDRP项目安装" class="headerlink" title="HDRP项目安装"></a>HDRP项目安装</h2><p>窗口—&gt;HDRP向导</p><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/img/202406271113610.png" alt="image-20240627111305585"></p><p>所有的复选框必须是绿色打勾的状态</p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><p>编辑—&gt;项目设置—&gt;HDRP Global Setting—&gt;默认体积配置文件资源</p><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/img/202406271120363.png" alt="image-20240627112056332"></p><p>在HDRP配置文件下面找到体积配置文件，并在此处进行修改。</p><p>项目默认使用此处的配置文件，因为我们需要自己生成项目的所有Volume配置信息，所以需要将预设全部取消。</p><h2 id="使用Volume框架设置场景环境"><a href="#使用Volume框架设置场景环境" class="headerlink" title="使用Volume框架设置场景环境"></a>使用Volume框架设置场景环境</h2><ol><li>在Hierarchy窗口，新建一个空的GameObject，重命名为Scene Settings。</li><li>在Inspector窗口添加一个Volume组件，然后新建一个配置文件Volume Profile，名为Scene Settings Profile。</li><li>在Volume组件下面点击添加覆盖按钮，添加Visual Environment，并将类型设置为HDRI Sky，因为使用HDRI Sky提供环境光照，所以移除场景中的Directional Light。</li><li>再次点击添加覆盖按钮，添加 HDRI Sky组件，然后勾选Hdri Sky 、Indensity Mode 、Exposure选项，该组件用来控制环境光强度。</li><li>再次点击添加覆盖按钮，选择Shadows，使用默认的数值。</li><li>尽管已经设置了HDRI和阴影的配置信息，但是需要让这些配置生效需要进一步设置，窗口—&gt;渲染—&gt;光照，打开光照界面在环境窗口中的配置文件，关联刚刚生成的Scene Settings Profile，并将静态光照天空改为HDRISky。</li><li>在添加室内光源之前，要先为场景添加屏幕后处理效果<ol><li>在Hierarchy窗口，创建一个空的GameObject。重命名为Post Processing。</li><li>为PostProcessing添加Volume组件，单击profile一栏右侧的new按钮生成PostProcessingProfile文件，用来保存后处理的更重信息。</li><li>单击添加覆盖按钮添加Exposure和Tonemapping等等。。。。</li><li>为生成的画面添加抗锯齿效果，使用Camera组件为画面添加抗锯齿效果</li></ol></li><li>添加光源、LightProbe 和 ReflectiongProbe。</li><li>烘培光照贴图 <ol><li>打开Liighting界面，确保参数设置正确<img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/img/202406271336070.png" alt="image-20240627133635025"></li><li>点击生成照明按钮开始烘培（通常不需要勾选 AutoGenerate，会导致编辑过程受到一定影响）</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unity </tag>
            
            <tag> Process </tag>
            
            <tag> High Definition Render Pipline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASE基本知识</title>
      <link href="/2024/07/11/ASE/"/>
      <url>/2024/07/11/ASE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Program </tag>
            
            <tag> ASE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作品集</title>
      <link href="/2024/07/11/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
      <url>/2024/07/11/%E4%BD%9C%E5%93%81%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="作品集"><a href="#作品集" class="headerlink" title="作品集"></a>作品集</h1><div class="note blue flat"><p>前言：这本作品集是我学习与实践的成果，它记录了我的专业技能与创作思路。每一份作品都代表了我对专业的理解和对品质的追求。希望通过这些精选的作品，能够让您更直观地了解我的实力与潜力。期待有机会为您的团队贡献我的力量。</p></div><p>带宽速度不高，加载速度会有一定的影响，经过测试输出的内容还是比较稳定的。</p><h2 id="Logo效果"><a href="#Logo效果" class="headerlink" title="Logo效果"></a>Logo效果</h2><div class="tabs" id="视频"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="视频-1">渲染效果</button><button type="button" class="tab " data-href="视频-2">细节部分</button><button type="button" class="tab " data-href="视频-3">部分源代码展示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="视频-1"><div class="videos"><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/VideoPass/LOGO.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-item-content" id="视频-2"><div class="tabs" id="体积光"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="体积光-1">体积光和SSR反射</button><button type="button" class="tab " data-href="体积光-2">代码分析</button></ul><div class="tab-contents"><div class="tab-item-content active" id="体积光-1"><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725272.png","alt":"2024-4-18 3_07_06"},{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725273.png","alt":"image-20240418032736469"},{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725274.png","alt":"image-20240418032753632"}]</div>      <div class="gallery-items">      </div>    </div></div><div class="tab-item-content" id="体积光-2"><p><strong>体积光</strong></p><p>处理：</p><p>a. 初始化射线、步长、当前位置、衰减率和颜色。</p><p>b. 进入一个循环，在循环中：</p><ul><li>使用噪声纹理和当前位置计算出一个噪声值，这个噪声值乘以密度来控制体积光的分布。</li><li>更新衰减率，模拟光线在介质中传播时的衰减。</li><li>如果衰减率低于某个阈值，则提前退出循环，因为此时的光线已经非常微弱。</li><li>更新当前位置，沿着射线方向前进一个步长。</li><li>累加颜色值，这里使用了一个简单的基于高度的雾色模型。<br>c. 将累加的颜色值乘以曝光度，并设置颜色的alpha值为1.0，表示不透明。<br>d. 返回最终的颜色值。</li></ul><p><strong>SSR镜面反射</strong></p><ol><li>计算反射路径<ul><li>使用相机到点的向量<code>V</code>和水面法线计算出反射方向。</li><li>根据这个反射方向和预设的SSR长度，确定反射光线在世界空间中的终点和远点。</li></ul></li><li>转换到屏幕空间<ul><li>把世界空间的反射路径起点、终点、远点转换为裁剪空间，再进一步转换为屏幕空间坐标。</li></ul></li><li>快速检查远点<ul><li>如果远点在屏幕范围内，检查其深度，如果深度合适，则直接采样该点的颜色作为反射颜色。</li></ul></li><li>线性追踪<ul><li>从屏幕空间的起点开始，沿着反射路径逐步前进。</li><li>在每一步，检查当前点的屏幕空间坐标是否在屏幕范围内，以及当前点的深度是否比之前记录的深度更近。</li><li>如果找到一个有效的交点（即深度比之前记录的近），则记录这个交点的屏幕空间坐标。</li></ul></li><li>采样反射颜色<ul><li>如果有有效的交点，根据交点的屏幕空间坐标采样颜色，并乘以一个基于视角和法线夹角的衰减因子。</li><li>如果没有有效的交点，但远点检查成功，则使用远点的颜色。</li><li>如果都没有成功，则反射颜色可能保持为初始化的零值或预设的默认值。</li></ul></li></ol><p><strong>LOGO模型</strong></p><ol><li>设计Logo模型<ul><li>初步构思Logo形状与风格</li><li>完成Logo的初步设计</li></ul></li><li>为Logo增加视觉效果<ul><li>添加扰动效果，赋予Logo动态感</li><li>融入反射效果，提升Logo的光泽与立体感</li><li>点缀星星效果，使Logo更加璀璨</li><li>添加<strong>虚拟光效果</strong>，模拟点光源增加一个光照效果，跟随小球运动实现实时渲染</li></ul></li><li>让Logo动起来<ul><li>添加运动效果，使Logo更生动</li></ul></li><li>增加环境元素<ul><li>在Logo周围添加飘动的小球和旋转的圆环，营造活泼、动感的氛围</li></ul></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="视频-3"><p><p><strong>Logo模型的ASE代码</strong><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725275.png" alt="image-20240418034245510"></p></p><p><p><strong>体积光部分代码</strong></p><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">//AABB</span><br><span class="line"> bool intersectAABB(float3 rayOrigin, float3 rayDir, float3 boxMin,</span><br><span class="line">                               float3 boxMax, out float2 tNearFar)</span><br><span class="line">            &#123;</span><br><span class="line">                float3 tMin = (boxMin - rayOrigin) / rayDir;</span><br><span class="line">                float3 tMax = (boxMax - rayOrigin) / rayDir;</span><br><span class="line">                float3 t1 = min(tMin, tMax);</span><br><span class="line">                float3 t2 = max(tMin, tMax);</span><br><span class="line">                float tNear = max(max(t1.x, t1.y), t1.z);</span><br><span class="line">                float tFar = min(min(t2.x, t2.y), t2.z);</span><br><span class="line">                tNearFar = float2(tNear, tFar);</span><br><span class="line"></span><br><span class="line">                return tFar &gt; tNear;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//光线步进</span><br><span class="line">UNITY_LOOP</span><br><span class="line">for (float k = 0; k &lt; vlSamples; k++)</span><br><span class="line">&#123;</span><br><span class="line">    float f = saturate((k + rand()) / vlSamples);</span><br><span class="line">    float3 p = lerp(startPos, endPos, f);</span><br><span class="line"></span><br><span class="line">    //射线与平面求交</span><br><span class="line">    float distance;</span><br><span class="line">    // float3 lightDir = normalize(LightPos - p);</span><br><span class="line">    // iPlane(p,L,float4(0,-1,0,0.5),distance);</span><br><span class="line">    intersectPlane(float3(0, -1, 0), float3(0, 0.5, 0), p, L, distance);</span><br><span class="line">    float3 hitPos = p + L * distance;</span><br><span class="line"></span><br><span class="line">    //白色体积光</span><br><span class="line">    float3 caustic = GetCaustic(hitPos.xz);</span><br><span class="line">    //*hsv2rgb(float3((p.y+_RainbowOffset + dot(L,-rayDir))*_RainbowScale+0.5,_RainbowIntensity,1));//*spectral_zucconi6(p.y+0.5);</span><br><span class="line">    //彩色体积光</span><br><span class="line">    float noise = tex2D(_Noise, hitPos.xz).r;</span><br><span class="line">    noise = lerp(1, 1.3, noise);</span><br><span class="line">    float3 causticColorful = 5 * GetCaustic(hitPos.xz) *</span><br><span class="line">        hsv2rgb(float3(</span><br><span class="line">        (p.y + _RainbowOffset + dot(L, -rayDir) * 0.1) * _RainbowScale * noise + 0.5,</span><br><span class="line">        _RainbowIntensity, 1)); </span><br><span class="line">    float rinbowMask = tex2D(_RainbowMask, hitPos.xz * 3);</span><br><span class="line">    caustic = lerp(caustic, causticColorful*1.5, rinbowMask) * 1.5;</span><br><span class="line">    // caustic = (causticColorful) * 1.5;</span><br><span class="line"></span><br><span class="line">    vlLight += caustic * add;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//体积光 核心算法 =======================================================</span><br><span class="line"></span><br><span class="line">float height = input.posOS.y + 0.5;</span><br><span class="line">float noise = tex2D(_Noise, input.posOS.xz).r;</span><br><span class="line"></span><br><span class="line">vlLight = vlLight * smoothstep(0.2, 1.1 + noise, height) * 20;</span><br><span class="line">vlLight = vlLight * multipleOctaves(height, cosTheta);</span><br><span class="line"></span><br><span class="line">float3 color = lerp(_Color1, _Color2, height) * 0.5 + vlLight; </span><br><span class="line"></span><br><span class="line">float alpha = exp(-rayMaxDistance * _Density);</span><br></pre></td></tr></table></figure></p><p><p><strong>SSR镜面部分代码</strong></p><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//远处的反射 RayMarch 无法Hit到</span><br><span class="line">float fade = pow(1-dot(normalize(V),waterNormal),1 );//fresnel</span><br><span class="line">// 最远端在相机视口内</span><br><span class="line">UNITY_BRANCH if((far_ScreenPixelNdcZ).y&lt;1)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    float farDepth =  GetDepth(far_ScreenPixelNdcZ.xy);</span><br><span class="line">    farDepth = LinearEyeDepth(farDepth);</span><br><span class="line">    UNITY_BRANCH if(abs(farDepth)&lt;SSRLength)</span><br><span class="line">    &#123;</span><br><span class="line">        // SSRColor =  GetSceneColor(far_ScreenPixelNdcZ.xy)*fade*float4(1,0,0,0);</span><br><span class="line">        SSRColor = GetSceneColor(far_ScreenPixelNdcZ.xy)*fade;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        SSRColor.w = 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">UNITY_LOOP</span><br><span class="line">for (int n=1;n&lt;MaxLingearStep;n++)</span><br><span class="line">&#123;</span><br><span class="line">    Ray += Step;</span><br><span class="line">    //如果测试点跑到 视口外面去了，那么停止for循环</span><br><span class="line">    UNITY_BRANCH if(Ray.z&lt;0 || Ray.z&gt;1 || Ray.x&lt;0 || Ray.x&gt;1 || Ray.y&lt;0 || Ray.y&gt;1)</span><br><span class="line">    &#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    float Depth = GetDepth(Ray.xy);</span><br><span class="line">    //  上一次深度&lt;Depth&lt;这一次深度</span><br><span class="line">    // if(Depth + _PerPixelCompareBias &gt;Ray.z &amp;&amp; Ray.z &lt;Depth +_PerPixelDepthBias )</span><br><span class="line">    if(Ray.z &lt; Depth  &amp;&amp; Depth &lt; LastDepth)</span><br><span class="line">    &#123;</span><br><span class="line">        isHit = true;</span><br><span class="line">        hitUV = Ray.xy;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    LastDepth =Ray.z;</span><br><span class="line">&#125;</span><br><span class="line">if(isHit)</span><br><span class="line">&#123;</span><br><span class="line">    SSRColor =  GetSceneColor(hitUV)*fade;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="视差卡片"><a href="#视差卡片" class="headerlink" title="视差卡片"></a>视差卡片</h2><div class="tabs" id="视差卡片"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="视差卡片-1">渲染效果</button><button type="button" class="tab " data-href="视差卡片-2">细节部分</button><button type="button" class="tab " data-href="视差卡片-3">部分源代码展示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="视差卡片-1"><div class="tabs" id="视差卡片"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="视差卡片-1">多巴胺女孩</button><button type="button" class="tab " data-href="视差卡片-2">模特橱窗</button><button type="button" class="tab " data-href="视差卡片-3">模板测试3D效果</button><button type="button" class="tab " data-href="视差卡片-4">深度测试滤镜效果</button></ul><div class="tab-contents"><div class="tab-item-content active" id="视差卡片-1"><div class="videos" col='2'><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/VideoPass/parallax4.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/VideoPass/Parallax1.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-item-content" id="视差卡片-2"><div class="videos" col='2'><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/VideoPass/parallax3.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/VideoPass/parallax2.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-item-content" id="视差卡片-3"><div class="videos"><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/VideoPass/TemplentTest.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-item-content" id="视差卡片-4"><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725276.png","alt":"2024-4-16 10_17_29"}]</div>      <div class="gallery-items">      </div>    </div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="视差卡片-2"><p><h2 id="视差效果算法"><a href="#视差效果算法" class="headerlink" title="视差效果算法"></a><strong>视差效果算法</strong></h2><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725277.png" alt=""></p></p><p><h3 id="计算视角与法线的夹角余弦值"><a href="#计算视角与法线的夹角余弦值" class="headerlink" title="计算视角与法线的夹角余弦值"></a>计算视角与法线的夹角余弦值</h3><p>通过计算<code>ViewTS</code>与z轴的点积（dot product）来得到夹角的余弦值。</p></p><p><p><strong>1.计算视差长度</strong></p></p><p><p>使用<code>Depth</code>除以夹角的余弦值来计算视差效果的长度。</p></p><p><p><strong>2.计算偏移纹理坐标</strong></p></p><p><p>根据<code>ViewTS</code>和视差长度来计算出偏移后的纹理坐标。</p></p><p><p><strong>3.采样纹理</strong></p></p><p><p>使用偏移后的纹理坐标从<code>_Map</code>中采样颜色。</p></p><p><h3 id="橱窗效果"><a href="#橱窗效果" class="headerlink" title="橱窗效果"></a><strong>橱窗效果</strong></h3><p><strong>1.生成深度图</strong></p></p><p><p>使用Stable Diffusion技术，开始制作深度图。</p></p><p><p>选择一种方法生成深度图：</p></p><p><p>使用具有浮雕效果的lora技术：通过lora处理原始2D图像，强调图像中的轮廓和细节，从而生成初始的深度信息。</p></p><p><p>或者，利用controlNet插件：这个插件可以分析图像中的空间关系和物体层次，生成更为精确的深度图。</p></p><p><p><strong>2.调整深度图</strong></p></p><p><p>打开Photoshop或其他图像处理软件。</p></p><p><p>导入生成的深度图。</p></p><p><p>调整深度图的明度，以确保深度信息的准确性和视觉效果的协调性。</p></p><p><p><strong>3.应用视差效果</strong> </p></p><p><p>将调整后的深度图应用于原始2D图像上，使用视差算法根据深度信息对图像进行分层处理。</p></p><p><p>调整视差效果的参数，以达到理想的3D橱窗效果。这些参数可能包括视差强度、分层数量等。</p></p><p><p>4.<strong>最终调整与输出</strong></p></p><p><p>对生成的3D橱窗效果进行最后的调整和优化，确保整体视觉效果的自然和协调。</p></p><p><p>导出最终的3D橱窗效果图像，准备用于展示或分享。</p></p><p><h2 id="贴图制作"><a href="#贴图制作" class="headerlink" title="贴图制作"></a><strong>贴图制作</strong></h2><p>多巴胺女孩和模特均由Sdable Diffusion制作，背景则是ps制作</p></p><p><p>主要步骤：</p></p><p><p>加载stable diffusion环境，选择大模型（猴人3D重制 V10.safetensors）</p></p><p><p>参数配置</p></p><p><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725279.png" alt=""></p></p><p><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725278.png" alt=""></p></p><p><p>再添加想要的提示词就能得到想要的图片啦</p></p><p><h3 id="高光和流光效果"><a href="#高光和流光效果" class="headerlink" title="高光和流光效果"></a>高光和流光效果</h3><p>高光效果可通过Blinn-Phong模型中的dot(N,H)实现，或通过光晕函数模拟，结合全局虚拟点光源和HSV色彩模型，呈现绚丽色彩。而流光效果则可采用Luminance函数或遮罩贴图来精准定位流光的动感部位。</p></p><p><h2 id="模板测试"><a href="#模板测试" class="headerlink" title="模板测试"></a>模板测试</h2><p><strong>1.设置蒙版的属性</strong></p><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ZWrite off//需要关闭深度写入，否则在渲染透明物体的时候会出错，透明物体会修改深度缓冲区</span><br><span class="line"></span><br><span class="line">//其中_ID是指可以通过蒙版显示的模型ID</span><br><span class="line">Stencil&#123;</span><br><span class="line">      Ref[_ID]//在模板缓存区中存储一个蒙版测试的ID</span><br><span class="line">      Comp always//设置这个ID的属性为可通过</span><br><span class="line">      Pass replace </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><p><p><strong>2.给模型设置ID</strong></p><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stencil &#123;</span><br><span class="line">      Ref [_ID]</span><br><span class="line">      Comp equal//模板测试将检查模板缓冲区中当前像素位置的值是否等于 Ref 设定的参考值（_ID）。如果相等，则测试通过；如果不等，则测试失败。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><p><strong>深度测试滤镜效果</strong></p></p><p><p>给物体添加两个pass，一个是正常显示的pass，另一个是滤镜效果的pass</p></p><p><p>滤镜效果的pass属性</p><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Blend SrcAlpha One</span><br><span class="line">ZTest Greater //核心</span><br><span class="line">//这是深度测试（Z-Testing）的设置。深度测试用于确定哪些像素应该被绘制到屏幕上。</span><br><span class="line">Greater 表示只有当当前像素的深度值大于深度缓冲区中的值时，才会绘制该像素。这通常用于实现一些特殊效果，如阴影或某些类型的贴图。</span><br><span class="line">在正常情况下，深度测试通常设置为 Less 或 Lequal（小于或等于），以确保更近的物体遮挡更远的物体。但在某些特殊情况下，如实现阴影效果时，Greater 测试可能很有用。</span><br><span class="line">ZWrite off</span><br><span class="line">Cull Back //节省性能</span><br></pre></td></tr></table></figure></p></div><div class="tab-item-content" id="视差卡片-3"><p><p><strong>效果实现代码</strong></p><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  //视差算法实现代码</span><br><span class="line">  float4 Parallax(in float2 uv,in float3 ViewTS,in float Depth,sampler2D _Map,float4 _Map_ST,in float Scale)</span><br><span class="line">  &#123;</span><br><span class="line">      uv = uv* _Map_ST.xy*Scale+_Map_ST.zw  ;</span><br><span class="line"></span><br><span class="line">      float CosAngle = dot(ViewTS,float3(0,0,1));</span><br><span class="line">      float LengthAB = Depth/CosAngle;</span><br><span class="line"></span><br><span class="line">      float3 UvA = float3(uv,0);</span><br><span class="line">      float3 UvB = UvA + ViewTS*LengthAB;</span><br><span class="line"></span><br><span class="line">      float4 Parallax = tex2D(_Map,saturate(UvB.xy));</span><br><span class="line">      return Parallax;</span><br><span class="line"> &#125;</span><br><span class="line">//贴图混合</span><br><span class="line"> if(DepthMap+_BodyDepth &gt; 0)</span><br><span class="line"> &#123;</span><br><span class="line">    FinalDisplay = lerp(linesmap,body,body.a);</span><br><span class="line">  </span><br><span class="line">    FinalDisplay = lerp(background,FinalDisplay,FinalDisplay.a);</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    FinalDisplay =lerp(background,body,body.a);</span><br><span class="line">   FinalDisplay =lerp(FinalDisplay,linesmap,linesmap.a);</span><br><span class="line">                    </span><br><span class="line">&#125;</span><br><span class="line">//高光与颜色</span><br><span class="line">float3 hsvcolor =  pow(specularcolor * HSVToRGB(float3(uv.x*_LinesColorLenght+_LinesColor,1,1)).xyzz,_LinesColorPowScale.x)*_LinesColorPowScale.y;</span><br><span class="line">            linesmap = linesmap.a*float4(hsvcolor,1)*_LinesTint ;</span><br></pre></td></tr></table></figure></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="仿原神卡通渲染"><a href="#仿原神卡通渲染" class="headerlink" title="仿原神卡通渲染"></a>仿原神卡通渲染</h2><div class="tabs" id="仿原神卡通渲染"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="仿原神卡通渲染-1">渲染效果</button><button type="button" class="tab " data-href="仿原神卡通渲染-2">细节部分</button><button type="button" class="tab " data-href="仿原神卡通渲染-3">部分源代码展示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="仿原神卡通渲染-1"><div class="videos"><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/VideoPass/mmd.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><div class="tabs" id="视差卡片"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="视差卡片-1">基本颜色</button><button type="button" class="tab " data-href="视差卡片-2">LightMap.r;//金属高光部位</button><button type="button" class="tab " data-href="视差卡片-3">LightMap.g;//光照偏移量，混合常暗区域（AO）;</button><button type="button" class="tab " data-href="视差卡片-4">**LightMap.a>_TestLayerNumber;//材质枚举**</button><button type="button" class="tab " data-href="视差卡片-5">采样金属度贴图</button><button type="button" class="tab " data-href="视差卡片-6">漫反射</button><button type="button" class="tab " data-href="视差卡片-7">高光</button><button type="button" class="tab " data-href="视差卡片-8">环境光</button></ul><div class="tab-contents"><div class="tab-item-content active" id="视差卡片-1"><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725280.png" alt="2024-4-16 8_05_11"></p></div><div class="tab-item-content" id="视差卡片-2"><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725281.png" alt="2024-4-16 8_05_46"></p></div><div class="tab-item-content" id="视差卡片-3"><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725282.png" alt="2024-4-16 8_06_00"></p></div><div class="tab-item-content" id="视差卡片-4"><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725283.png","alt":"2024-4-16 8_07_22"},{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725284.png","alt":"2024-4-16 8_07_29"},{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725285.png","alt":"2024-4-16 8_07_36"},{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725286.png","alt":"2024-4-16 8_07_49"},{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725287.png","alt":"2024-4-16 8_07_54"}]</div>      <div class="gallery-items">      </div>    </div></div><div class="tab-item-content" id="视差卡片-5"><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725288.png" alt="2024-4-16 8_09_07"></p></div><div class="tab-item-content" id="视差卡片-6"><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725289.png" alt="2024-4-16 8_09_38"></p></div><div class="tab-item-content" id="视差卡片-7"><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725290.png" alt="2024-4-16 8_10_10"></p></div><div class="tab-item-content" id="视差卡片-8"><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404180725291.png" alt="2024-4-18 6_44_50"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="仿原神卡通渲染-2"><p><h2 id="NPR仿原神渲染"><a href="#NPR仿原神渲染" class="headerlink" title="NPR仿原神渲染"></a>NPR仿原神渲染</h2><p><strong>1. 准备资源</strong></p></p><p>收集并准备好所有必要的贴图，如纹理贴图、光照贴图等。</p><p><strong>2. 添加环境光</strong></p><ul><li>应用Half Lambert光照模型。</li></ul><p><strong>3. 明暗处理</strong></p><ul><li>使用<code>smoothstep</code>函数，通过设定合适的阈值，实现模型表面明暗区域的过渡。</li><li>结合二分搜索或其他优化算法，快速而准确地确定明暗交界线，从而生成更具二次元风格的阴影效果。</li></ul><p><strong>4. 材质与颜色处理</strong></p><ul><li>利用光照贴图的alpha通道来识别不同材质区域，这样可以为每个区域应用不同的颜色处理方案。</li><li>通过ramp贴图技术，根据光照方向和表面法线，为模型表面添加二次元风格的颜色效果，使色彩更加丰富和生动。</li></ul><p><strong>5. 高光处理</strong></p><ul><li>采用Blinn-Phong光照模型来分别模拟金属和非金属的高光反射效果，为模型增加真实感和立体感。</li><li>通过提取光照贴图的R通道信息，强调金属部分的高光反射。</li></ul><p><strong>6. 阴影混合</strong></p><ul><li>将前面步骤中生成的阴影效果进行混合和调整，以增强模型的深度和层次感。</li><li>根据需要调整阴影的密度、颜色和位置，以达到最佳的视觉效果。</li></ul><p><strong>7. 添加描边效果</strong></p><ul><li>在模型的边缘添加明显的描边效果，以突出角色的轮廓和特征。</li></ul><h2 id="MMD制作"><a href="#MMD制作" class="headerlink" title="MMD制作"></a>MMD制作</h2><p>1.场景布置</p><p><strong>背景采样与颜色混合</strong></p><p>根据输入的纹理坐标（<code>i.ase_texcoord2.xy</code>）和背景纹理的变换参数（<code>_BackGround_ST</code>），计算背景纹理的采样坐标<code>uv_BackGround</code>。</p><p>从背景纹理中采样颜色，并根据一系列参数（如背景颜色、星星亮度等）进行混合，得到初始的颜色值。</p><p><strong>雾效处理</strong></p><p>通过一系列的计算，包括标准化、距离计算和clamp操作，来确定雾效的影响程度。</p><p>使用<code>smoothstep</code>函数来平滑地过渡雾效的影响区域。</p><p>2.动作载入</p><p>准备好vmd动作文件，使用unity的MMD4插件，将PXM模型文件和vmd文件处理成FBX模型，使用动画控制器添加动作效果，在模型中添加组件</p><p>3.音频载入</p><p>使用videosourse组件添加相匹配的音频文件</p></div><div class="tab-item-content" id="仿原神卡通渲染-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">//=======漫反射=======//</span><br><span class="line">  float lambert = saturate(NL);</span><br><span class="line">  float halfLambert = pow(lambert * 0.5 + 0.5, 2);</span><br><span class="line">  float halfLambertStep = smoothstep(0.423, 0.460, halfLambert);</span><br><span class="line"></span><br><span class="line">  float rampU = clamp(smoothstep(0.2, 0.4, halfLambert), 0.005, 0.995);//阴影部分中的深浅是在0.2到0.4之间过渡</span><br><span class="line">  float2 dayRampUV = float2(rampU, 1 - dayRampV);</span><br><span class="line">  float2 nightRampUV = float2(rampU, 1 - nightRampV);</span><br><span class="line">  float3 rampColor = lerp(tex2D(_RampMap, nightRampUV).rgb, tex2D(_RampMap, dayRampUV).rgb, _IsDay);//利用_isDay插值白天与黑夜的阴影颜色</span><br><span class="line">  float3 shadowColor = lerp(BaseMap, BaseMap * rampColor, _LightThreshold) ;//* _ShaodwColor.rgb</span><br><span class="line"></span><br><span class="line">  float3 diffuse = lerp(shadowColor, BaseMap, halfLambertStep);//明部到阴影是在0.423到0.460之间过渡的</span><br><span class="line">  diffuse = lerp(shadowColor, diffuse, saturate(RampOffsetMask * 2));//将ILM贴图的g通道乘2 用saturate函数将超过1的部分去掉，混合常暗区域（AO）</span><br><span class="line"></span><br><span class="line">  diffuse = lerp(diffuse, BaseMap, saturate(RampOffsetMask - 0.5) * 2);//将ILM贴图的g通道减0.5乘2 用saturate函数将小于0的部分去掉，混合常亮部分（眼睛）</span><br><span class="line">  diffuse = diffuse+diffuse* _DiffuseColor.rgb*_LightColor0; //* _DiffuseColor.rgb;</span><br><span class="line"></span><br><span class="line">//=======高光=======//</span><br><span class="line">  // //高光反射</span><br><span class="line">  float blinnPhong = step(0, NL) * pow(max(NH, 0), _MetallicStepSpecularWidth);</span><br><span class="line">  float3 hairSpec = tex2D(_HairSpecMap, i.uv).rgb * blinnPhong * _HairSpecIntensity * BaseMap;</span><br><span class="line">  float3 nonMetallicSpec = step(1.01 - blinnPhong, _MetallicStepSpecularWidth) * specIntensity * _NonMetallicSpecIntensity + hairSpec;//BlinnPhong取反做step用来限制非金属高光的区域</span><br><span class="line">  float3 metallicSpec = blinnPhong * _MetallicStepSpecularWidth * halfLambertStep * BaseMap * _MetallicSpecIntensity;</span><br><span class="line"></span><br><span class="line">  //计算金属、高光项</span><br><span class="line">  float isMetal = step( 0.5,specIntensity);</span><br><span class="line"></span><br><span class="line">  float3 specular = lerp(metallicSpec, nonMetallicSpec, isMetal)*_SpecularColor.rgb;</span><br><span class="line">  float3 metallic = lerp(0, metallicIndensity, isMetal) * BaseMap * _MetallicIntensity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  //混合</span><br><span class="line">  float3 finalColor = diffuse  + metallic +specular;</span><br><span class="line">//=======环境边缘光反射=======//</span><br><span class="line">  fixed fresnel = 1.0 - dot(N, V);</span><br><span class="line">  fresnel = lerp(fresnel, 2.0 - fresnel, step(1, fresnel));//由于开启了双面显示，当显示出来的面片为背面时，需要取2.0 - fresnel</span><br><span class="line">  fresnel = smoothstep(_FresnelMin, _FresnelMax, fresnel);</span><br><span class="line">  fixed3 reflectDir = reflect( - V, N);//反射光线方向</span><br><span class="line">  //环境反射粗糙度</span><br><span class="line">  float roughness = lerp(0.0, 0.95, saturate(_Roughness));</span><br><span class="line">  roughness = roughness * (1.7 - 0.7 * roughness);</span><br><span class="line">  float mipLevel = roughness * 6.0;</span><br><span class="line">  //EnvironmentHDR贴图</span><br><span class="line">  half4 cubemapColor = texCUBElod(_EnvironmentMap, float4(reflectDir, mipLevel));</span><br><span class="line">  half3 environmentColor = DecodeHDR(cubemapColor, _EnvironmentMap_HDR);</span><br><span class="line">  half3 environment = environmentColor * fresnel * _EnvironmentIntensity;</span><br><span class="line">  </span><br><span class="line">  //发射阴影</span><br><span class="line">  UNITY_LIGHT_ATTENUATION(atten,  i,  i.worldPosition);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  //添加描边pass</span><br><span class="line">  V2FData vert(MeshData v)</span><br><span class="line">  &#123;</span><br><span class="line">      V2FData o;</span><br><span class="line">      v.vertex.xyz += v.tangent.xyz *_OulineScale*0.01 * v.vertexColor.g ; //用顶点色的alpha通道控制描边粗细</span><br><span class="line">      o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">      o.color = v.vertexColor;</span><br><span class="line">      return o;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>场景代码</strong></p><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404181009622.png" alt="image-20240418100248875"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="体积云"><a href="#体积云" class="headerlink" title="体积云"></a>体积云</h2><div class="tabs" id="体积云"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="体积云-1">渲染效果</button><button type="button" class="tab " data-href="体积云-2">细节部分</button><button type="button" class="tab " data-href="体积云-3">部分源代码展示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="体积云-1"><div class="videos"><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/VideoPass/VolumeCloud.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-item-content" id="体积云-2"><p><strong>主光线追踪循环</strong></p><ul><li>对于每条从摄像机发出的光线，进行固定步数的追踪（由<code>RaySteps</code>控制）。</li><li>在每一步，计算当前光线位置，并评估该位置的云密度和形状（通过调用<code>clouds</code>函数得到符号距离场SDF和密度）。</li><li>如果当前位置在云内部（SDF为负且密度大于0），则执行次级光线追踪来模拟光源对云的影响：<ul><li>沿着光源方向进行另一次光线追踪（由<code>LightSteps</code>控制）。</li><li>在每一步中，评估当前光源光线位置处的云密度和形状。</li><li>累积光学深度，用于后续的光照计算。</li></ul></li><li>计算环境光照和直接光照对云的影响，得到当前位置的光照能量。</li><li>根据云的密度和光的吸收系数，更新光线的穿透率。</li><li>将计算得到的光照能量和穿透率累加到散射结果中。</li></ul><p>循环结束处理</p><ul><li>在完成所有光线追踪步骤后，根据一个全局的光强参数调整累积的光能量。</li><li>返回最终的散射结果，包括累积的光能量和穿透比率。这个结果可以用于后续的渲染流程，如颜色混合或透明度调整。</li></ul><p><strong>3D贴图制作</strong></p><p>1.物体shader 使用<strong>VFACE</strong> 判断模正反 给予不同的颜色</p><p>2.shader 中调整裁剪clip的值，对模型进行切片,并使用相机将每片拍下来保存为Texture2D 数组</p><p>3.将保存的Texture2D数组 生成为Texture3D</p><p>4.将生成完的Texture3D 重新载入另一个shader进行模糊，再次切片 合成导出。</p></div><div class="tab-item-content" id="体积云-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">UNITY_LOOP</span><br><span class="line">for (int i = 0; i &lt; RaySteps; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    float3 currentPos = begin + depth * dir;</span><br><span class="line">    float sdf, density;</span><br><span class="line">    clouds(currentPos, sdf, density);</span><br><span class="line">    // Inside</span><br><span class="line">    if (sdf &lt; 0 &amp;&amp; density &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        //沿着 光源方向，进行二次 RayMarching</span><br><span class="line">        float3 beginPos2 = currentPos;</span><br><span class="line">        float opticalDepth = 0;</span><br><span class="line">        float t2 = 0;</span><br><span class="line">        UNITY_LOOP</span><br><span class="line">        for (int j = 0; j &lt; LightSteps; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            float3 currentPos2 = beginPos2 + t2 * L;</span><br><span class="line">            float sdf2, density2;</span><br><span class="line">            clouds(currentPos2, sdf2, density2);</span><br><span class="line">            if (sdf2 &lt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                opticalDepth += LightStep * density2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            t2 += max(LightStep, sdf2);</span><br><span class="line">            if (any(currentPos2 &lt; -0.5) || any(currentPos2 &gt; 0.5)) break;</span><br><span class="line">            //跑到sdf形状外面去了</span><br><span class="line">            // if(sdf2&gt;0.1) break; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 模拟环境光照</span><br><span class="line">        float3 ambient = 20*_LightColor0 * lerp(_AmbientColor1, _AmbientColor2, (currentPos.y*0.5 + 0.5)) * _AmbientIntensity* lerp(1,density,_AmbientDensity);</span><br><span class="line">        float3 lightEnergy = 20*_LightColor0 * multipleOctaves(opticalDepth, cosTheta) * 3.14 * phase ;</span><br><span class="line">        float3 currentColor = ambient + lightEnergy;</span><br><span class="line"></span><br><span class="line">        float3 transmittance = exp(-step* _Absorption * density);</span><br><span class="line"></span><br><span class="line">        //体积云 最核心的光照算法，就是这两行</span><br><span class="line">        ScatteringResult.xyz += currentColor * (1.0 - transmittance) * ScatteringResult.w;</span><br><span class="line">        ScatteringResult.w *= transmittance;</span><br><span class="line">    &#125;</span><br><span class="line">    // 每次至少向前步进的距离</span><br><span class="line">    depth += max(sdf, step);</span><br><span class="line">    if (any(currentPos &lt; -0.55) || any(currentPos &gt; 0.55)) break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="动态曲面细分"><a href="#动态曲面细分" class="headerlink" title="动态曲面细分"></a>动态曲面细分</h2><div class="tabs" id="动态曲面细分"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="动态曲面细分-1">渲染效果</button><button type="button" class="tab " data-href="动态曲面细分-2">细节部分</button><button type="button" class="tab " data-href="动态曲面细分-3">部分源代码展示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="动态曲面细分-1"><div class="videos"><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/VideoPass/Tessellation.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-item-content" id="动态曲面细分-2"><p>动态效果</p><ol><li>初始化（Start方法）<ul><li>脚本在开始时首先通过<code>Camera.main</code>获取主摄像机的引用，并存储在<code>mainCamera</code>变量中。</li><li>接着，它调用<code>CreateRT</code>方法来创建三个渲染纹理：<code>TempRT</code>, <code>PrevRT</code>, <code>CurrentRT</code>。这些渲染纹理将用于后续的图像处理和效果应用。</li><li>初始化<code>DrawMat</code>和<code>SnowMat</code>两个材质，并将它们分别与<code>DrawShader</code>和<code>SnowShader</code>着色器相关联。</li><li>最后，它将当前对象的渲染器的纹理设置为<code>CurrentRT</code>，这意味着该对象将显示<code>CurrentRT</code>中的内容。</li></ul></li><li>绘制准备（每帧Update方法之前）<ul><li>在每帧更新之前，系统已经准备好了所有必要的资源，包括摄像机、渲染纹理和着色器材质。</li></ul></li><li>用户交互与绘制（Update方法中的射线检测部分）<ul><li>在每一帧中，脚本首先检查用户是否按下了鼠标左键。</li><li>如果按下，脚本通过<code>mainCamera</code>执行一个从摄像机位置发射并经过鼠标在屏幕上的位置的射线。</li><li>如果这个射线与场景中的任何物体相交（即发生了碰撞），则记录碰撞点的纹理坐标。</li><li>使用记录的纹理坐标和预设的绘制半径，调用<code>DrawAt</code>方法来在<code>CurrentRT</code>的相应位置上“绘制”一个效果（可能是足迹或其他图形）。</li></ul></li><li>图像处理效果（Update方法中的计算部分）<ul><li>紧接着，脚本设置效果的衰减速度（<code>AttenSpeed</code>），这可能影响速度。</li><li>使用<code>SnowMat</code>和两个渲染纹理（<code>PrevRT</code>和<code>CurrentRT</code>）来计算累积效果。这里<code>PrevRT</code>保存了上一帧的状态，而<code>CurrentRT</code>保存了当前帧的状态。</li><li>通过<code>Graphics.Blit</code>方法，将处理后的图像输出到<code>TempRT</code>中，这个临时渲染纹理现在包含了更新后的效果。</li></ul></li><li>渲染纹理交换（Update方法的最后部分）<ul><li>为了在下一帧中保留当前帧的状态，脚本执行一系列渲染纹理的交换操作。</li><li>首先，将<code>TempRT</code>的内容复制到<code>PrevRT</code>中，以便在下一帧中作为上一帧的数据使用。</li><li>然后，将<code>CurrentRT</code>和<code>PrevRT</code>的引用交换，这样<code>CurrentRT</code>现在就包含了最新的效果，而<code>PrevRT</code>保存了前一帧的效果。</li></ul></li><li>渲染与显示<ul><li>随着每帧的更新，对象的渲染器将显示<code>CurrentRT</code>中的内容，这是最新计算出的效果。</li><li>用户将继续看到根据他们的交互效果的累积与消融而动态变化的场景。</li></ul></li></ol></div><div class="tab-item-content" id="动态曲面细分-3"><p>曲面细分步骤</p><ol><li>常量外壳着色器（Constant Hull Shader, <code>ConstantHS</code>）<ul><li>此阶段计算整个曲面的细分级别。它接收原始的控制点（这里是三角形的三个顶点）作为输入，并基于这些控制点计算出一个细分因子（<code>fac</code>）。</li><li>在这个例子中，细分因子是根据纹理采样结果和某些预设参数（如<code>_maxVal</code>, <code>_minVal</code>, <code>_factor</code>）通过<code>smoothstep</code>函数动态计算的。</li><li>计算出细分因子后，它会被应用到三角形的每条边和内部，决定曲面将被细分成多少个小三角形。</li></ul></li><li>外壳着色器（Hull Shader, <code>hullProgram</code>）<ul><li>在常量外壳着色器之后，外壳着色器为每个细分后的控制点（这里是每个原始控制点的细分版本）计算输出数据。</li><li>这个阶段主要为每个控制点准备如世界位置、纹理坐标、法线等必要的插值数据，这些数据将在后续的域着色器中使用。</li></ul></li><li>曲面细分<ul><li>基于常量外壳着色器计算出的细分因子，硬件会执行实际的曲面细分操作，生成更多的三角形来逼近原始曲面。</li></ul></li><li>域着色器（Domain Shader, <code>domainProgram</code>）<ul><li>域着色器运行在细分后的每个小三角形上。它接收由外壳着色器准备的插值数据和细分后小三角形的重心坐标作为输入。</li><li>使用这些输入数据，域着色器计算出每个细分三角形的顶点属性，如位置、纹理坐标、法线等。</li><li>这些顶点属性是通过原始控制点的属性进行线性插值得到的。</li></ul></li><li>几何着色器/光栅化<ul><li>在某些情况下，曲面细分之后可能还会有一个几何着色器阶段，用于进一步处理细分后的几何图形。</li><li>然后，这些几何数据将被光栅化，转换为屏幕空间的像素，以供像素着色器处理。</li></ul></li><li>像素着色器<ul><li>最后，在像素着色器阶段，将处理光栅化后的像素，应用纹理、光照等效果，并最终输出到屏幕上。</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">//vert顶点程序之后调用，计算细分前的三角形顶点信息</span><br><span class="line">TessOut hullProgram(InputPatch&lt;v2t, 3&gt; i, uint idx : SV_OutputControlPointID)</span><br><span class="line">&#123;</span><br><span class="line">TessOut o;</span><br><span class="line">o.worldPos = i[idx].worldPos;</span><br><span class="line">o.uv = i[idx].uv;</span><br><span class="line">o.normalWS = i[idx].normalWS;</span><br><span class="line">o.normalOS = i[idx].normalOS;</span><br><span class="line">o.pos = i[idx].pos;</span><br><span class="line">o.tangent = i[idx].tangent;</span><br><span class="line">o.bitangent = i[idx].bitangent;</span><br><span class="line">return o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//指定每个边的细分段数和内部细分段数</span><br><span class="line">TessParam ConstantHS(InputPatch&lt;v2t, 3&gt; i, uint id : SV_PrimitiveID)</span><br><span class="line">&#123;</span><br><span class="line">TessParam o;</span><br><span class="line">float2 uv =(i[0].uv+i[1].uv+i[2].uv)/3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">float4 worldPos = (i[0].worldPos + i[1].worldPos + i[2].worldPos) / 3;</span><br><span class="line">float4 pos = (i[0].pos + i[1].pos + i[2].pos) / 3;//</span><br><span class="line"></span><br><span class="line">float4 tex = tex2Dlod(_MainTex,float4(uv,0,0))+(1-pos.y);</span><br><span class="line"></span><br><span class="line">float smoothstepResult = smoothstep(_maxVal,_minVal , tex);</span><br><span class="line"></span><br><span class="line">float fac = max((1.0 - smoothstepResult)*_factor, 1);</span><br><span class="line"></span><br><span class="line">//由于我这里是根据指定的中心点和半径范围来动态算细分段数，所以才有这个计算，不然可以直接指定变量来设置。</span><br><span class="line">o.EdgeTess[0] = fac;</span><br><span class="line">o.EdgeTess[1] = fac;</span><br><span class="line">o.EdgeTess[2] = fac;</span><br><span class="line">o.InsideTess = fac;</span><br><span class="line">return o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//在domainProgram前必须设置domain参数，不然会报错</span><br><span class="line">[domain(&quot;tri&quot;)]</span><br><span class="line">//细分之后，把信息传到frag片段程序</span><br><span class="line">t2f domainProgram(TessParam tessParam, float3 bary : SV_DomainLocation, const OutputPatch&lt;TessOut, 3&gt; i)</span><br><span class="line">&#123;</span><br><span class="line">t2f o;</span><br><span class="line">//线性转换</span><br><span class="line">o.worldPos = i[0].worldPos * bary.x + i[1].worldPos * bary.y + i[2].worldPos * bary.z;</span><br><span class="line">o.clipPos = UnityWorldToClipPos(o.worldPos);</span><br><span class="line">float2 uv = i[0].uv * bary.x + i[1].uv * bary.y + i[2].uv * bary.z;</span><br><span class="line">o.uv = uv;</span><br><span class="line">o.pos = i[0].pos* bary.x+ i[1].pos * bary.y + i[2].pos * bary.z;</span><br><span class="line">o.normalWS = i[0].normalWS* bary.x+ i[1].normalWS * bary.y + i[2].normalWS* bary.z;</span><br><span class="line">o.normalOS = i[0].normalOS* bary.x+ i[1].normalOS * bary.y + i[2].normalOS* bary.z;</span><br><span class="line">o.tangent = i[0].tangent* bary.x+ i[1].tangent * bary.y + i[2].tangent* bary.z; </span><br><span class="line">o.bitangent = i[0].bitangent* bary.x+ i[1].bitangent * bary.y + i[2].bitangent* bary.z;</span><br><span class="line"></span><br><span class="line">return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="后处理shader"><a href="#后处理shader" class="headerlink" title="后处理shader"></a>后处理shader</h2><div class="tabs" id="后处理效果"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="后处理效果-1">渲染效果</button><button type="button" class="tab " data-href="后处理效果-2">部分源代码展示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="后处理效果-1"><div class="tabs" id="后处理效果展示"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="后处理效果展示-1">黑白漫画效果</button><button type="button" class="tab " data-href="后处理效果展示-2">暗角效果</button><button type="button" class="tab " data-href="后处理效果展示-3">扰动效果</button><button type="button" class="tab " data-href="后处理效果展示-4">油画效果</button><button type="button" class="tab " data-href="后处理效果展示-5">模糊效果</button></ul><div class="tab-contents"><div class="tab-item-content active" id="后处理效果展示-1"><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404240934874.png" alt="2024-4-16 11_10_11"></p></div><div class="tab-item-content" id="后处理效果展示-2"><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404240940392.png" alt="2024-4-16 11_10_45"></p></div><div class="tab-item-content" id="后处理效果展示-3"><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404240934876.png" alt="2024-4-16 11_10_57"></p></div><div class="tab-item-content" id="后处理效果展示-4"><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404240934877.png" alt="2024-4-16 11_11_03"></p></div><div class="tab-item-content" id="后处理效果展示-5"><p><img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404240934878.png" alt="2024-4-16 11_11_13"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="后处理效果-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">float3 Oil(float2 uv)</span><br><span class="line"> &#123;</span><br><span class="line">     float4 normalmap = tex2D(_OilNormalMap,uv);</span><br><span class="line">     UnpackNormal(normalmap);</span><br><span class="line"></span><br><span class="line">     float2 Coloruv = uv + normalmap.xy*_OilIndensity  * 0.01;</span><br><span class="line"></span><br><span class="line">     float3 Color = tex2D(_MainTex,Coloruv);</span><br><span class="line"></span><br><span class="line">     float3 hsv = RGBToHSV(Color);</span><br><span class="line">     Color.rgb = HSVToRGB(hsv + float3(0,0.29,-0.07));</span><br><span class="line"></span><br><span class="line">     // normalmap = pow(normalmap,_OilRange) * _OilIndensity;</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">     return Color;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> float3 Vague(float2 uv)</span><br><span class="line"> &#123;</span><br><span class="line">     </span><br><span class="line">     float4 View = float4(0,0,0,0);</span><br><span class="line"></span><br><span class="line">     for(int x = -_VagueLevel;x &lt;=_VagueLevel;x++)</span><br><span class="line">     &#123;</span><br><span class="line">         for(int y = -_VagueLevel;y&lt;=_VagueLevel;y++)</span><br><span class="line">         &#123;</span><br><span class="line">             float2 offset = float2(x*_VagueScale,y*_VagueScale)*0.001;</span><br><span class="line">             View += tex2D(_MainTex,uv + offset);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     View /= (_VagueLevel * 2 +1) * (_VagueLevel * 2 + 1);</span><br><span class="line"></span><br><span class="line">     return View.xyz;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> float3 Cartoon(float2 uv)</span><br><span class="line"> &#123;</span><br><span class="line">     float2 Cartoonuv = uv;</span><br><span class="line"></span><br><span class="line">     Cartoonuv = Cartoonuv*_NoisePowScaleUVScale.z;</span><br><span class="line">     </span><br><span class="line">     float3 Color = tex2D(_MainTex,uv);</span><br><span class="line">     float3 Noise = tex2D(_NoiseMap,Cartoonuv);</span><br><span class="line">     </span><br><span class="line">  </span><br><span class="line">     Noise = pow(Noise,_NoisePowScaleUVScale.x)*_NoisePowScaleUVScale.y;</span><br><span class="line">     if(_ChangeLight)</span><br><span class="line">     &#123;</span><br><span class="line">         Color  =  Color+Noise;</span><br><span class="line">         Color = Color.r &gt; Luminance(_luminanceVale);                    </span><br><span class="line">     &#125;</span><br><span class="line">     else</span><br><span class="line">     &#123;</span><br><span class="line">         if(Color.r &lt;  Luminance(_luminanceVale))</span><br><span class="line">         &#123;</span><br><span class="line">             Color += Noise;</span><br><span class="line">         &#125;</span><br><span class="line">             </span><br><span class="line">     &#125;</span><br><span class="line">             </span><br><span class="line">     return Color.r;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> float3 DackCorner(float2 uv)</span><br><span class="line"> &#123;</span><br><span class="line">     float3 Color = tex2D(_MainTex,uv);</span><br><span class="line">     float2 Center=float2(0.5,0.5);</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">     float Range = saturate(_DackRange - distance(Center,uv));</span><br><span class="line"></span><br><span class="line">     Range = saturate(pow(Range,_DackPowScale.x) * _DackPowScale.y);</span><br><span class="line"></span><br><span class="line">     return Color*Range;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> float3 Disturbance(float2 uv)</span><br><span class="line"> &#123;</span><br><span class="line">     </span><br><span class="line">   </span><br><span class="line">     float3 disturbancemap = tex2D(_DisturbanceMap,(uv + float2(_DisturbanceDirecter.x,_DisturbanceDirecter.y)*_Time*_DisturbanceSpeed) *_DisturbanceIndensity*0.01);</span><br><span class="line">     </span><br><span class="line">     float2 disturbanceuv;</span><br><span class="line">     disturbanceuv = uv + _DisturbanceRange*disturbancemap;</span><br><span class="line"></span><br><span class="line">     float3 Color = tex2D(_MainTex,disturbanceuv);</span><br><span class="line"></span><br><span class="line">     return Color;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="水墨风格shader"><a href="#水墨风格shader" class="headerlink" title="水墨风格shader"></a>水墨风格shader</h2><div class="tabs" id="水墨风格片"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="水墨风格片-1">渲染效果</button><button type="button" class="tab " data-href="水墨风格片-2">细节部分</button><button type="button" class="tab " data-href="水墨风格片-3">部分源代码展示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="水墨风格片-1"><div class="videos"><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/VideoPass/Ink.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-item-content" id="水墨风格片-2"><ol><li>处理光照信息<ul><li>首先，对输入的法线进行归一化。</li><li>获取场景中的主光源信息，包括光源方向和阴影衰减。</li></ul></li><li>应用噪声扰动<ul><li>使用噪声纹理（<code>_InteriorNoise</code>）对输入的纹理坐标进行扰动，得到一个噪声值。</li><li>结合另一个纹理（<code>_StrokeTex</code>）和一些调整参数，对原始的纹理坐标进行修改，得到一个新的坐标。</li></ul></li><li>限制坐标范围<ul><li>确保新坐标的值不超过某个上限（如0.95），并进行范围限制，使其在0到1之间。</li></ul></li><li>执行高斯模糊<ul><li>初始化一个用于累加的颜色变量。</li><li>在新坐标周围按照高斯分布采样一个颜色纹理（<code>_Ramp</code>），对每个采样点的颜色进行加权累加，以实现模糊效果。</li></ul></li><li>合成最终颜色<ul><li>将高斯模糊后的颜色作为最终的颜色输出（在这个特定的代码版本中，阴影效果被注释掉了，所以不考虑阴影衰减）。</li></ul></li></ol></div><div class="tab-item-content" id="水墨风格片-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">float4 burn = tex2D(_InteriorNoise, i.uv);</span><br><span class="line">// a little bit disturbance on normal vector</span><br><span class="line">float diff =  dot(worldNormal, worldLightDir);</span><br><span class="line">diff = pow((diff * 0.5 + 0.5),_darkPow);</span><br><span class="line">float2 k = tex2D(_StrokeTex, i.uv).xy;</span><br><span class="line">float2 cuv = float2(diff, diff) + k * burn.xy * _InteriorNoiseLevel;</span><br><span class="line">// return burn;</span><br><span class="line"></span><br><span class="line">// This iniminate the bias of the uv movement?</span><br><span class="line">if (cuv.x &gt; 0.95)</span><br><span class="line">&#123;</span><br><span class="line">  cuv.x = 0.95;</span><br><span class="line">  cuv.y = 1;</span><br><span class="line">&#125;</span><br><span class="line">if (cuv.y &gt;  0.95)</span><br><span class="line">&#123;</span><br><span class="line">  cuv.x = 0.95;</span><br><span class="line">  cuv.y = 1;</span><br><span class="line">&#125;</span><br><span class="line">cuv = clamp(cuv, 0, 1);</span><br><span class="line"></span><br><span class="line">//Guassian Blur</span><br><span class="line">float4 sum = float4(0.0, 0.0, 0.0, 0.0);</span><br><span class="line">        float2 tc = cuv;</span><br><span class="line">        //blur radius in pixels</span><br><span class="line">        float blur = radius/resolution/4;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="风格化水面"><a href="#风格化水面" class="headerlink" title="风格化水面"></a>风格化水面</h2><div class="tabs" id="风格化水面"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="风格化水面-1">渲染效果</button><button type="button" class="tab " data-href="风格化水面-2">细节部分</button><button type="button" class="tab " data-href="风格化水面-3">部分源代码展示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="风格化水面-1"><div class="videos"><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/VideoPass/Water.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404240934879.png","alt":"2024-4-24 9_05_55"},{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404240934880.png","alt":"2024-4-24 9_08_51"},{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404240934881.png","alt":"2024-4-24 9_09_09"},{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404240934882.png","alt":"2024-4-24 9_13_36"},{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404240934883.png","alt":"2024-4-24 9_13_55"},{"url":"https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404240934884.png","alt":"2024-4-24 9_14_29"}]</div>      <div class="gallery-items">      </div>    </div></div><div class="tab-item-content" id="风格化水面-2"><p>波浪效果</p><ul><li><p>通过引入时间依赖的扰动函数，在顶点着色器中动态调整顶点位置，创造出逼真的波浪起伏效果。</p><p>反射效果</p></li><li><p>利用屏幕空间反射（SSR）或平面反射（PR）技术，实现水面上的高质量反射。通过添加适当的模糊效果，进一步提升SSR的视觉效果，增加场景深度感。</p><p>泡沫、涟漪与焦散</p></li><li><p>应用焦散贴图，模拟光线折射和反射效果，形成焦散光斑。同时，通过动态调整贴图的UV坐标，增添生动的泡沫和涟漪效果。</p></li></ul><p>光照效果</p><ul><li>采用Half Lambert光照模型增强漫反射效果。</li><li>结合Blinn-Phong高光模型，模拟真实的高光反射，提升水面的视觉质感。</li></ul></div><div class="tab-item-content" id="风格化水面-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> //===================== Foam 边缘水花=======================================================================</span><br><span class="line">#ifdef USE_FOAM</span><br><span class="line">    // return _NoiseMap.Sample(sampler_NoiseMap,  input.positionWS.xz*0.1 + float2(_Time.x*2,0));</span><br><span class="line">    float foamDistance = 1- saturate(depthDistance/2);</span><br><span class="line">    //从中间往 岸边动</span><br><span class="line">    float foamDynamic = 0.5* step( _FoamWidth,frac(foamDistance - _Time.y*0.1*_FoamSpeed + noise.r*0.0325)) * foamDistance*foamDistance;</span><br><span class="line"></span><br><span class="line">    //浪花衰减</span><br><span class="line">    foamDynamic = _EnableDynamicFoam*foamDynamic* smoothstep( _FoamFadeDistance ,1,foamDistance);</span><br><span class="line">    float foamStatic =  0.5 *step( _FoamWidth,frac(foamDistance  + noise.r*0.03525)) * foamDistance*foamDistance;</span><br><span class="line">    float foam = max(foamDynamic,foamStatic);</span><br><span class="line"></span><br><span class="line">    //加点噪音举出</span><br><span class="line">    float foamNoise = SAMPLE_TEXTURE2D(_FoamNoiseMap, sampler_FoamNoiseMap,positionWS.xz*_FoamNoiseMap_ST.xy);</span><br><span class="line">    foamNoise = saturate( pow(foamNoise,_FoamNoisePowScaleVec.x) *_FoamNoisePowScaleVec.y);</span><br><span class="line"></span><br><span class="line">    finalColor += foam*LightLum*_FoamColor*foamNoise* saturate(dot(N,V));</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">//===================== Caustic 模拟焦散 =================================</span><br><span class="line">//用深度图的世界坐标采样 CausticMap 模拟其在水中晃动的感觉</span><br><span class="line">//贴图焦散</span><br><span class="line"></span><br><span class="line">#ifndef  USE_PROCEDURAL_CAUSTIC</span><br><span class="line">    float4 caustic = SAMPLE_TEXTURE2D(_CausticMap, sampler_CausticMap, depthWorldPosition.xz*0.2*_CausticMap_ST.xy+distortionUV*5);</span><br><span class="line">    // float4 caustic = SAMPLE_TEXTURE2D(_CausticMap, sampler_CausticMap, positionWS.xz*0.2*_CausticMap_ST.xy+distortionUV*5);</span><br><span class="line">#else</span><br><span class="line">//程序化焦散</span><br><span class="line">    float4 caustic =GetCaustic(depthWorldPosition*0.4*_CausticUVScale+distortionUV.xyy*5 + float3(0,_Time.x,0)).xyzz;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">caustic *= smoothstep(_CausticFade,1, (1-distortionDistanceFade) )*_CausticIntensity*NL01;</span><br><span class="line">finalColor += caustic*LightLum* mainLight.shadowAttenuation;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="森林遗迹"><a href="#森林遗迹" class="headerlink" title="森林遗迹"></a>森林遗迹</h2><div class="tabs" id="森林遗迹"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="森林遗迹-1">渲染效果</button></ul><div class="tab-contents"><div class="tab-item-content active" id="森林遗迹-1"><div class="videos"><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/VideoPass/forest.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="工具脚本制作"><a href="#工具脚本制作" class="headerlink" title="工具脚本制作"></a>工具脚本制作</h2><div class="tabs" id="视差卡片"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="视差卡片-1">mesh合并工具</button><button type="button" class="tab " data-href="视差卡片-2">3D贴图制作工具</button><button type="button" class="tab " data-href="视差卡片-3">动态贴图制作工具</button><button type="button" class="tab " data-href="视差卡片-4">镜子工具</button><button type="button" class="tab " data-href="视差卡片-5">运镜工具</button></ul><div class="tab-contents"><div class="tab-item-content active" id="视差卡片-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public class MeshMergerEditor : EditorWindow  </span><br><span class="line">&#123;  </span><br><span class="line">    [MenuItem(&quot;Tools/Merge Meshes&quot;)]  </span><br><span class="line">    private static void MergeSelectedMeshes()  </span><br><span class="line">    &#123;  </span><br><span class="line">        // 获取当前选中的GameObject  </span><br><span class="line">        GameObject[] selectedObjects = Selection.gameObjects;  </span><br><span class="line">        List&lt;Mesh&gt; meshesToMerge = new List&lt;Mesh&gt;();  </span><br><span class="line">  </span><br><span class="line">        // 遍历选中的GameObject，获取它们的MeshFilter组件中的网格  </span><br><span class="line">        foreach (GameObject obj in selectedObjects)  </span><br><span class="line">        &#123;  </span><br><span class="line">            MeshFilter meshFilter = obj.GetComponent&lt;MeshFilter&gt;();  </span><br><span class="line">            if (meshFilter != null)  </span><br><span class="line">            &#123;  </span><br><span class="line">                meshesToMerge.Add(meshFilter.sharedMesh);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        // 如果没有选中任何网格或者选中的GameObject没有MeshFilter组件，则返回  </span><br><span class="line">        if (meshesToMerge.Count == 0)  </span><br><span class="line">        &#123;  </span><br><span class="line">            Debug.LogError(&quot;No meshes selected to merge.&quot;);  </span><br><span class="line">            return;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        // Prepare combine instances  </span><br><span class="line">        CombineInstance[] combineInstances = new CombineInstance[meshesToMerge.Count];  </span><br><span class="line">        for (int i = 0; i &lt; meshesToMerge.Count; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            combineInstances[i].mesh = meshesToMerge[i];  </span><br><span class="line">            combineInstances[i].transform = Matrix4x4.identity;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        // Create a new mesh to hold the combined meshes  </span><br><span class="line">        Mesh combinedMesh = new Mesh();  </span><br><span class="line">        combinedMesh.CombineMeshes(combineInstances);  </span><br><span class="line">        combinedMesh.name = &quot;MergedMesh_&quot; + System.DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;);  </span><br><span class="line">  </span><br><span class="line">        // Create a new GameObject to hold the merged mesh  </span><br><span class="line">        GameObject mergedMeshObject = new GameObject(&quot;MergedMeshObject&quot;);  </span><br><span class="line">        mergedMeshObject.AddComponent&lt;MeshFilter&gt;().mesh = combinedMesh;  </span><br><span class="line">        mergedMeshObject.AddComponent&lt;MeshRenderer&gt;(); // Optionally add a MeshRenderer  </span><br><span class="line">  </span><br><span class="line">        // Place the merged mesh object at the world origin by default  </span><br><span class="line">        mergedMeshObject.transform.position = Vector3.zero;  </span><br><span class="line">  </span><br><span class="line">        // Select the new merged mesh object in the Hierarchy view  </span><br><span class="line">        Selection.activeObject = mergedMeshObject;  </span><br><span class="line">  </span><br><span class="line">        // Optionally, you can save the mesh as an asset  </span><br><span class="line">        string path = EditorUtility.SaveFilePanel(&quot;Save Merged Mesh&quot;, &quot;&quot;, combinedMesh.name + &quot;.mesh&quot;, &quot;mesh&quot;);  </span><br><span class="line">        if (!string.IsNullOrEmpty(path))  </span><br><span class="line">        &#123;  </span><br><span class="line">            AssetDatabase.CreateAsset(combinedMesh, path);  </span><br><span class="line">            AssetDatabase.SaveAssets();  </span><br><span class="line">            AssetDatabase.Refresh();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="视差卡片-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEditor;</span><br><span class="line">using UnityEngine;</span><br><span class="line">[ExecuteInEditMode]</span><br><span class="line">public class Render3DTexture : MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    public Vector3 Size = Vector3.one;</span><br><span class="line">    public Vector3 Offset = Vector3.zero;</span><br><span class="line"></span><br><span class="line">    public Vector3Int TextureSize = new Vector3Int(256,256,256);</span><br><span class="line"></span><br><span class="line">    private Camera renderCam;</span><br><span class="line"></span><br><span class="line">    private RenderTexture renderTexture;</span><br><span class="line"></span><br><span class="line">    private Texture3D volumeTex;</span><br><span class="line"></span><br><span class="line">    public Material SliceMat;</span><br><span class="line"></span><br><span class="line">    public Material BlurMat;</span><br><span class="line"></span><br><span class="line">    public bool Blur = false;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //public List&lt;Texture2D&gt; textureArray = new List&lt;Texture2D&gt;();</span><br><span class="line"></span><br><span class="line">    [Range(0,1.0f)]</span><br><span class="line">    public float ClipValueRange = 0;</span><br><span class="line">    private float ClipValue = -0.5f;</span><br><span class="line">    [Tooltip(&quot;输出路径&quot;)]</span><br><span class="line">    public string OutputPath = &quot;testAsset1.asset&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 生成相机</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    private void NewCam()</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject cam = new GameObject(&quot;TempCam&quot;);</span><br><span class="line"></span><br><span class="line">        cam.transform.position = transform.position + Size.y *0.51f *Vector3.up +Offset;</span><br><span class="line"></span><br><span class="line">        Vector3 localEuler = cam.transform.localEulerAngles;</span><br><span class="line"></span><br><span class="line">        localEuler.x = 90;</span><br><span class="line">        localEuler.y = 180;</span><br><span class="line"></span><br><span class="line">        cam.transform.localEulerAngles = localEuler;</span><br><span class="line"></span><br><span class="line">        renderCam = cam.AddComponent&lt;Camera&gt;();</span><br><span class="line"></span><br><span class="line">        renderCam.orthographic = true;</span><br><span class="line"></span><br><span class="line">        renderCam.orthographicSize = Size.x*0.5f;</span><br><span class="line"></span><br><span class="line">        renderCam.nearClipPlane = 0.0001f;</span><br><span class="line">        renderCam.farClipPlane = 100;</span><br><span class="line"></span><br><span class="line">        renderCam.clearFlags = CameraClearFlags.SolidColor;</span><br><span class="line"></span><br><span class="line">        renderCam.backgroundColor = Color.black;</span><br><span class="line"></span><br><span class="line">        renderTexture = CreateRT(TextureSize.x, TextureSize.z);</span><br><span class="line"></span><br><span class="line">        renderCam.targetTexture = renderTexture;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void StartRender()</span><br><span class="line">    &#123;</span><br><span class="line">        NewCam();</span><br><span class="line"></span><br><span class="line">        volumeTex = new Texture3D(TextureSize.x, TextureSize.y, TextureSize.z,TextureFormat.RFloat,false);</span><br><span class="line"></span><br><span class="line">        RenderSlice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void RenderSlice()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        //渲染范围</span><br><span class="line">        Vector3 center = transform.position;</span><br><span class="line">        float min = -Size.y * 0.5f + Offset.y + center.y;</span><br><span class="line">        float max = Size.y * 0.5f + Offset.y + center.y;</span><br><span class="line"></span><br><span class="line">        ClipValue = min;</span><br><span class="line"></span><br><span class="line">        Color[] colors = new Color[TextureSize.x * TextureSize.y * TextureSize.z];</span><br><span class="line"></span><br><span class="line">        int layerCount = TextureSize.x * TextureSize.z;</span><br><span class="line"></span><br><span class="line">        for (int layer = 0; layer &lt; TextureSize.y; layer++)</span><br><span class="line">        &#123;</span><br><span class="line">            renderCam.Render();</span><br><span class="line"></span><br><span class="line">            ClipValue += (max - min) / TextureSize.y;</span><br><span class="line"></span><br><span class="line">            float progress = (float)layer / TextureSize.y;</span><br><span class="line"></span><br><span class="line">            bool isCancel = EditorUtility.DisplayCancelableProgressBar(&quot;正在执行..&quot;,string.Format(&quot;生成3DTexture中... &#123;0:f2&#125;%&quot;, progress*100), progress);</span><br><span class="line"></span><br><span class="line">            if (SliceMat != null)SliceMat.SetFloat(&quot;_ClipValue&quot;, ClipValue);</span><br><span class="line"></span><br><span class="line">            Texture2D sliceTex = RenderTexture2Texture2D(renderTexture);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            int index = 0;</span><br><span class="line">            //拷贝颜色</span><br><span class="line">            for (int z = 0; z &lt; TextureSize.z; z++)</span><br><span class="line">                for (int x = 0; x &lt; TextureSize.x; x++)</span><br><span class="line">                &#123;</span><br><span class="line">                    //XY -&gt;XZ</span><br><span class="line">                    index = x + z * TextureSize.y * TextureSize.x+layer* TextureSize.x;</span><br><span class="line">                    colors[index] = sliceTex.GetPixel(x, z);</span><br><span class="line">                &#125;</span><br><span class="line">            //渲染完成或者取消时关闭进度条</span><br><span class="line">            if (layer &gt;= TextureSize.y - 1 || isCancel)</span><br><span class="line">            &#123;</span><br><span class="line">                EditorUtility.ClearProgressBar();</span><br><span class="line"></span><br><span class="line">                if (isCancel)</span><br><span class="line">                &#123;</span><br><span class="line">                    DestroyImmediate(renderCam.gameObject);</span><br><span class="line">                    renderTexture.Release();</span><br><span class="line"></span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        volumeTex.SetPixels(colors);</span><br><span class="line">        volumeTex.Apply();</span><br><span class="line">        if (Blur)</span><br><span class="line">        &#123;</span><br><span class="line">            volumeTex = BlurTexture(volumeTex);</span><br><span class="line">        &#125;</span><br><span class="line">        string filePath = &quot;Assets/&quot;+ OutputPath;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            AssetDatabase.DeleteAsset(filePath);</span><br><span class="line">            AssetDatabase.CreateAsset(volumeTex, filePath);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">        DestroyImmediate(renderCam.gameObject);</span><br><span class="line">        renderTexture.Release();</span><br><span class="line">        renderTexture = null;</span><br><span class="line">        UnityEditor.AssetDatabase.SaveAssets();</span><br><span class="line">        AssetDatabase.Refresh();</span><br><span class="line">    &#125;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// Renderer转成Texture2D</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;rt&quot;&gt;&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    public Texture2D RenderTexture2Texture2D(RenderTexture rt)</span><br><span class="line">    &#123;</span><br><span class="line">        RenderTexture preRT = RenderTexture.active;</span><br><span class="line">        RenderTexture.active = rt;</span><br><span class="line">        Texture2D tex = new Texture2D(rt.width, rt.height, TextureFormat.ARGB32, false);</span><br><span class="line">        tex.ReadPixels(new Rect(0, 0, rt.width, rt.height), 0, 0);</span><br><span class="line">        tex.Apply();</span><br><span class="line">        RenderTexture.active = preRT;</span><br><span class="line">        return tex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnDrawGizmos()</span><br><span class="line">    &#123;</span><br><span class="line">        Gizmos.DrawWireCube(this.transform.position+Offset, Size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnDestory()</span><br><span class="line">    &#123;</span><br><span class="line">        renderTexture.Release();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Texture3D BlurTexture(Texture3D tex)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i = 0; i &lt; 2; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Color[] colors = new Color[TextureSize.x * TextureSize.y * TextureSize.z];</span><br><span class="line"></span><br><span class="line">            int index = 0;</span><br><span class="line"></span><br><span class="line">            for (int layer = 0; layer &lt; TextureSize.y; layer++)</span><br><span class="line">            &#123;</span><br><span class="line">                BlurMat.SetTexture(&quot;_VolumeTex&quot;, tex);</span><br><span class="line">                BlurMat.SetFloat(&quot;_offset&quot;, layer * 1.0f / TextureSize.y);</span><br><span class="line">                Debug.Log(layer * 1.0f / TextureSize.y);</span><br><span class="line"></span><br><span class="line">                RenderTexture rt = new RenderTexture(TextureSize.x, TextureSize.z, 24, RenderTextureFormat.ARGB32);</span><br><span class="line"></span><br><span class="line">                Graphics.Blit(null, rt, BlurMat);</span><br><span class="line"></span><br><span class="line">                Texture2D sliceTex = RenderTexture2Texture2D(rt);</span><br><span class="line"></span><br><span class="line">                //拷贝颜色</span><br><span class="line">                for (int z = 0; z &lt; TextureSize.z; z++)</span><br><span class="line">                    for (int x = 0; x &lt; TextureSize.x; x++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        //XY -&gt;XZ</span><br><span class="line">                        index = x + z * TextureSize.y * TextureSize.x + layer * TextureSize.x;</span><br><span class="line">                        colors[index] = sliceTex.GetPixel(x, z);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tex.SetPixels(colors);</span><br><span class="line">            tex.Apply();</span><br><span class="line">        &#125;</span><br><span class="line">        return tex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private RenderTexture CreateRT(int width, int height)</span><br><span class="line">    &#123;</span><br><span class="line">        RenderTexture rt = new RenderTexture(width, height, 16);</span><br><span class="line">        rt.format = RenderTextureFormat.ARGBFloat;</span><br><span class="line">        rt.wrapMode = TextureWrapMode.Repeat;</span><br><span class="line">        rt.filterMode = FilterMode.Point;</span><br><span class="line">        rt.Create();</span><br><span class="line">        return rt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if (SliceMat == null)</span><br><span class="line">        &#123;</span><br><span class="line">            SliceMat = GetComponent&lt;Renderer&gt;().sharedMaterial;</span><br><span class="line">        &#125;</span><br><span class="line">        if (SliceMat != null)</span><br><span class="line">        &#123;</span><br><span class="line">            float min = -Size.y * 0.5f + Offset.y+transform.position.y;</span><br><span class="line">            float max = Size.y * 0.5f + Offset.y +transform.position.y;</span><br><span class="line">            float value = Mathf.Lerp(min, max, ClipValueRange);</span><br><span class="line">            SliceMat.SetFloat(&quot;_ClipValue&quot;, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="视差卡片-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using Palmmedia.ReportGenerator.Core.Parser.Analysis;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Interactive : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    public Camera mainCamera;</span><br><span class="line"></span><br><span class="line">    public RenderTexture TempRT;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    public Shader DrawShader;</span><br><span class="line"></span><br><span class="line">    private Material DrawMat;</span><br><span class="line">    public int TextureSize = 512;</span><br><span class="line"></span><br><span class="line">    [Range(0,1.0f)]</span><br><span class="line">    public float DrawRadius = 0.5f;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    public RenderTexture PrevRT;//上一帧RT</span><br><span class="line">    //public RenderTexture CurrentRT;//当前帧RT</span><br><span class="line">    public RenderTexture CurrentRT;</span><br><span class="line">    public Shader SnowShader;</span><br><span class="line">    private Material SnowMat;</span><br><span class="line">        </span><br><span class="line">    [Range(0,1)]</span><br><span class="line">    public float AttenSpeed = 0.5f;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        mainCamera = Camera.main.GetComponent&lt;Camera&gt;();</span><br><span class="line">        CurrentRT = CreateRT();</span><br><span class="line">        PrevRT = CreateRT();</span><br><span class="line">        TempRT = CreateRT();</span><br><span class="line"></span><br><span class="line">        DrawMat = new Material(DrawShader);</span><br><span class="line">        SnowMat = new Material(SnowShader);</span><br><span class="line"></span><br><span class="line">        GetComponent&lt;Renderer&gt;().material.mainTexture = CurrentRT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public RenderTexture CreateRT()</span><br><span class="line">    &#123;</span><br><span class="line">        RenderTexture rt = new RenderTexture(TextureSize, TextureSize, 0, RenderTextureFormat.RFloat);</span><br><span class="line">        rt.Create();</span><br><span class="line">        return rt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void DrawAt(float x,float y, float radius)</span><br><span class="line">    &#123;</span><br><span class="line">        //原来的贴图</span><br><span class="line">        DrawMat.SetTexture(&quot;_SourceTex&quot;,CurrentRT);</span><br><span class="line">        //绘制的大小和位置</span><br><span class="line">        DrawMat.SetVector(&quot;_Pos&quot;,new Vector4(x,y,radius));</span><br><span class="line">        //输出</span><br><span class="line">        Graphics.Blit(null,TempRT,DrawMat);</span><br><span class="line">        //进行交换</span><br><span class="line">        RenderTexture rt = TempRT;</span><br><span class="line">        TempRT = CurrentRT;</span><br><span class="line">        CurrentRT = rt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        Shader.SetGlobalFloat(&quot;_AttenSpeed&quot;,AttenSpeed);</span><br><span class="line">        //射线检测</span><br><span class="line">        if (Input.GetMouseButton(0))</span><br><span class="line">        &#123;</span><br><span class="line">            //鼠标左键按下时进行检测</span><br><span class="line">            Ray ray = mainCamera.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">            //获取碰撞信息</span><br><span class="line">            RaycastHit hit;</span><br><span class="line">            if (Physics.Raycast(ray,out hit))</span><br><span class="line">            &#123;</span><br><span class="line">                //绘制</span><br><span class="line">                DrawAt(hit.textureCoord.x, hit.textureCoord.y, DrawRadius);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //计算</span><br><span class="line">        SnowMat.SetTexture(&quot;_PrevRT&quot;,PrevRT);</span><br><span class="line">        SnowMat.SetTexture(&quot;_CurrentRT&quot;,CurrentRT);</span><br><span class="line">        Graphics.Blit(null,TempRT,SnowMat);</span><br><span class="line">        //交换RT</span><br><span class="line">        Graphics.Blit(TempRT,PrevRT);</span><br><span class="line">        RenderTexture rt = PrevRT;</span><br><span class="line">        PrevRT = CurrentRT;</span><br><span class="line">        CurrentRT = rt;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="视差卡片-4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.Rendering;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[ExecuteInEditMode]</span><br><span class="line">public class PlanarReflection : MonoBehaviour &#123;</span><br><span class="line">    public LayerMask _reflectionMask = -1;</span><br><span class="line">    public bool _reflectSkybox = false;</span><br><span class="line">    Color _clearColor = Color.black;</span><br><span class="line">    public int m_TextureSize = 1024;</span><br><span class="line"></span><br><span class="line">    const string _reflectionSampler = &quot;_ReflectionTex&quot;;</span><br><span class="line">    public float _clipPlaneOffset = 0.07F;</span><br><span class="line"></span><br><span class="line">    Vector3 _oldpos;</span><br><span class="line">    Camera _reflectionCamera;</span><br><span class="line">    RenderTexture _bluredReflectionTexture;</span><br><span class="line">    Material _sharedMaterial;</span><br><span class="line"></span><br><span class="line">    public bool _blurOn = true;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    [Range(0.0f, 5.0f)]</span><br><span class="line">    public float _blurSize = 1;</span><br><span class="line">    public int _blurIterations = 2;</span><br><span class="line">    public float _downsample = 1;</span><br><span class="line"></span><br><span class="line">#if UNITY_EDITOR</span><br><span class="line">    bool _oldBlurOn;</span><br><span class="line">    float _oldBlurSize;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    private Shader _blurShader;</span><br><span class="line">    private Material _blurMaterial;</span><br><span class="line"></span><br><span class="line">    private static bool s_InsideWater;</span><br><span class="line">    private RenderTexture rt;</span><br><span class="line"></span><br><span class="line">    Material BlurMaterial &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            if (_blurMaterial == null) &#123;</span><br><span class="line">                _blurMaterial = new Material(_blurShader);</span><br><span class="line">                return _blurMaterial;</span><br><span class="line">            &#125;</span><br><span class="line">            return _blurMaterial;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#if UNITY_EDITOR</span><br><span class="line">    void Awake() &#123;</span><br><span class="line">        _oldBlurOn = _blurOn;</span><br><span class="line">        _oldBlurSize = _blurSize;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    void Start() &#123;</span><br><span class="line">        _sharedMaterial = GetComponent&lt;MeshRenderer&gt;().sharedMaterial;</span><br><span class="line">        if (_blurShader == null)</span><br><span class="line">            _blurShader = Shader.Find(&quot;Hidden/SimpleBlur&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Camera CreateReflectionCameraFor(Camera cam) &#123;</span><br><span class="line">        String reflName = gameObject.name + &quot;Reflection&quot; + cam.name;</span><br><span class="line">        GameObject go = new GameObject(reflName);</span><br><span class="line">        go.hideFlags = HideFlags.HideAndDontSave;</span><br><span class="line">        Camera reflectCamera = go.AddComponent&lt;Camera&gt;();</span><br><span class="line"></span><br><span class="line">        reflectCamera.backgroundColor = _clearColor;</span><br><span class="line">        reflectCamera.clearFlags = _reflectSkybox ? CameraClearFlags.Skybox : CameraClearFlags.SolidColor;</span><br><span class="line"></span><br><span class="line">        SetStandardCameraParameter(reflectCamera, _reflectionMask);</span><br><span class="line"></span><br><span class="line">        if (!reflectCamera.targetTexture) &#123;</span><br><span class="line">            reflectCamera.targetTexture = CreateTexture();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return reflectCamera;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void SetStandardCameraParameter(Camera cam, LayerMask mask) &#123;</span><br><span class="line">        cam.cullingMask = mask;</span><br><span class="line">        cam.backgroundColor = Color.black;</span><br><span class="line">        cam.enabled = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RenderTexture CreateTexture() &#123;</span><br><span class="line">#if UNITY_EDITOR</span><br><span class="line">        //RenderTexture rt = new RenderTexture(Mathf.FloorToInt(Screen.width), Mathf.FloorToInt(Screen.height * 0.5f), 16);</span><br><span class="line">        rt = new RenderTexture(m_TextureSize, m_TextureSize, 16);</span><br><span class="line">        </span><br><span class="line">#else</span><br><span class="line">        //RenderTexture rt = new RenderTexture(Mathf.FloorToInt(Screen.width * 0.5f), Mathf.FloorToInt(Screen.height * 0.5f), 16);</span><br><span class="line">        RenderTexture rt = new RenderTexture(m_TextureSize,m_TextureSize, 16);</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line">        rt.hideFlags = HideFlags.DontSave;</span><br><span class="line">        return rt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void OnWillRenderObject() &#123;</span><br><span class="line">        Camera currentCam = Camera.current;</span><br><span class="line">        if (!currentCam) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#if !UNITY_EDITOR</span><br><span class="line">        if (!currentCam.gameObject.CompareTag(&quot;MainCamera&quot;))</span><br><span class="line">            return;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#if UNITY_EDITOR</span><br><span class="line">        if (!_bluredReflectionTexture)</span><br><span class="line">            _bluredReflectionTexture = CreateTexture();</span><br><span class="line">#else</span><br><span class="line">        if(_blurOn) &#123;</span><br><span class="line">            if (!_bluredReflectionTexture)</span><br><span class="line">                _bluredReflectionTexture = CreateTexture();</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">        if (s_InsideWater) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        s_InsideWater = true;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (!_reflectionCamera) &#123;</span><br><span class="line">            _reflectionCamera = CreateReflectionCameraFor(currentCam);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RenderReflectionFor(currentCam, _reflectionCamera);</span><br><span class="line"></span><br><span class="line">        if (_reflectionCamera &amp;&amp; _sharedMaterial) &#123;</span><br><span class="line">            if (_blurOn) &#123;</span><br><span class="line">                PostProcessTexture(currentCam, _reflectionCamera.targetTexture, _bluredReflectionTexture);</span><br><span class="line">                _sharedMaterial.SetTexture(_reflectionSampler, _bluredReflectionTexture);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                _sharedMaterial.SetTexture(_reflectionSampler, _reflectionCamera.targetTexture);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s_InsideWater = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#if UNITY_EDITOR</span><br><span class="line">    bool _blurParamChanged;</span><br><span class="line">    void Update() &#123;</span><br><span class="line">        if (_blurParamChanged) &#123;</span><br><span class="line">            _oldBlurOn = _blurOn;</span><br><span class="line">            _oldBlurSize = _blurSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (_blurOn != _oldBlurOn || _blurSize != _oldBlurSize) &#123;</span><br><span class="line">            _blurParamChanged = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    void RenderReflectionFor(Camera cam, Camera reflectCamera) &#123;</span><br><span class="line">        if (!reflectCamera) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (_sharedMaterial &amp;&amp; !_sharedMaterial.HasProperty(_reflectionSampler)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reflectCamera.cullingMask = _reflectionMask;</span><br><span class="line"></span><br><span class="line">        SaneCameraSettings(reflectCamera);</span><br><span class="line"></span><br><span class="line">        reflectCamera.backgroundColor = _clearColor;</span><br><span class="line">        reflectCamera.clearFlags = _reflectSkybox ? CameraClearFlags.Skybox : CameraClearFlags.SolidColor;</span><br><span class="line">        if (_reflectSkybox) &#123;</span><br><span class="line">            if (cam.gameObject.GetComponent(typeof(Skybox))) &#123;</span><br><span class="line">                Skybox sb = (Skybox)reflectCamera.gameObject.GetComponent(typeof(Skybox));</span><br><span class="line">                if (!sb) &#123;</span><br><span class="line">                    sb = (Skybox)reflectCamera.gameObject.AddComponent(typeof(Skybox));</span><br><span class="line">                &#125;</span><br><span class="line">                sb.material = ((Skybox)cam.GetComponent(typeof(Skybox))).material;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bool isInvertCulling = GL.invertCulling;</span><br><span class="line">        GL.invertCulling = true;</span><br><span class="line"></span><br><span class="line">        Transform reflectiveSurface = transform; //waterHeight;</span><br><span class="line"></span><br><span class="line">        Vector3 eulerA = cam.transform.eulerAngles;</span><br><span class="line"></span><br><span class="line">        reflectCamera.transform.eulerAngles = new Vector3(-eulerA.x, eulerA.y, eulerA.z);</span><br><span class="line">        reflectCamera.transform.position = cam.transform.position;</span><br><span class="line"></span><br><span class="line">        Vector3 pos = reflectiveSurface.transform.position;</span><br><span class="line">        pos.y = reflectiveSurface.position.y;</span><br><span class="line">        Vector3 normal = reflectiveSurface.transform.up;</span><br><span class="line">        float d = -Vector3.Dot(normal, pos) - _clipPlaneOffset;</span><br><span class="line">        Vector4 reflectionPlane = new Vector4(normal.x, normal.y, normal.z, d);</span><br><span class="line"></span><br><span class="line">        Matrix4x4 reflection = Matrix4x4.zero;</span><br><span class="line">        reflection = CalculateReflectionMatrix(reflection, reflectionPlane);</span><br><span class="line">        _oldpos = cam.transform.position;</span><br><span class="line">        Vector3 newpos = reflection.MultiplyPoint(_oldpos);</span><br><span class="line"></span><br><span class="line">        reflectCamera.worldToCameraMatrix = cam.worldToCameraMatrix * reflection;</span><br><span class="line"></span><br><span class="line">        Vector4 clipPlane = CameraSpacePlane(reflectCamera, pos, normal, 1.0f);</span><br><span class="line"></span><br><span class="line">        Matrix4x4 projection = cam.projectionMatrix;</span><br><span class="line">        projection = CalculateObliqueMatrix(projection, clipPlane);</span><br><span class="line">        reflectCamera.projectionMatrix = projection;</span><br><span class="line"></span><br><span class="line">        reflectCamera.transform.position = newpos;</span><br><span class="line">        Vector3 euler = cam.transform.eulerAngles;</span><br><span class="line">        reflectCamera.transform.eulerAngles = new Vector3(-euler.x, euler.y, euler.z);</span><br><span class="line"></span><br><span class="line">        reflectCamera.Render();</span><br><span class="line"></span><br><span class="line">        GL.invertCulling = isInvertCulling;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    void SaneCameraSettings(Camera helperCam) &#123;</span><br><span class="line">        helperCam.depthTextureMode = DepthTextureMode.None;</span><br><span class="line">        helperCam.backgroundColor = Color.black;</span><br><span class="line">        helperCam.clearFlags = CameraClearFlags.SolidColor;</span><br><span class="line">        helperCam.renderingPath = RenderingPath.Forward;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane) &#123;</span><br><span class="line">        Vector4 q = projection.inverse * new Vector4(</span><br><span class="line">            Sgn(clipPlane.x),</span><br><span class="line">            Sgn(clipPlane.y),</span><br><span class="line">            1.0F,</span><br><span class="line">            1.0F</span><br><span class="line">            );</span><br><span class="line">        Vector4 c = clipPlane * (2.0F / (Vector4.Dot(clipPlane, q)));</span><br><span class="line">        // third row = clip plane - fourth row</span><br><span class="line">        projection[2] = c.x - projection[3];</span><br><span class="line">        projection[6] = c.y - projection[7];</span><br><span class="line">        projection[10] = c.z - projection[11];</span><br><span class="line">        projection[14] = c.w - projection[15];</span><br><span class="line"></span><br><span class="line">        return projection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane) &#123;</span><br><span class="line">        reflectionMat.m00 = (1.0F - 2.0F * plane[0] * plane[0]);</span><br><span class="line">        reflectionMat.m01 = (-2.0F * plane[0] * plane[1]);</span><br><span class="line">        reflectionMat.m02 = (-2.0F * plane[0] * plane[2]);</span><br><span class="line">        reflectionMat.m03 = (-2.0F * plane[3] * plane[0]);</span><br><span class="line"></span><br><span class="line">        reflectionMat.m10 = (-2.0F * plane[1] * plane[0]);</span><br><span class="line">        reflectionMat.m11 = (1.0F - 2.0F * plane[1] * plane[1]);</span><br><span class="line">        reflectionMat.m12 = (-2.0F * plane[1] * plane[2]);</span><br><span class="line">        reflectionMat.m13 = (-2.0F * plane[3] * plane[1]);</span><br><span class="line"></span><br><span class="line">        reflectionMat.m20 = (-2.0F * plane[2] * plane[0]);</span><br><span class="line">        reflectionMat.m21 = (-2.0F * plane[2] * plane[1]);</span><br><span class="line">        reflectionMat.m22 = (1.0F - 2.0F * plane[2] * plane[2]);</span><br><span class="line">        reflectionMat.m23 = (-2.0F * plane[3] * plane[2]);</span><br><span class="line"></span><br><span class="line">        reflectionMat.m30 = 0.0F;</span><br><span class="line">        reflectionMat.m31 = 0.0F;</span><br><span class="line">        reflectionMat.m32 = 0.0F;</span><br><span class="line">        reflectionMat.m33 = 1.0F;</span><br><span class="line"></span><br><span class="line">        return reflectionMat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static float Sgn(float a) &#123;</span><br><span class="line">        if (a &gt; 0.0F) &#123;</span><br><span class="line">            return 1.0F;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a &lt; 0.0F) &#123;</span><br><span class="line">            return -1.0F;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0.0F;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign) &#123;</span><br><span class="line">        Vector3 offsetPos = pos + normal * _clipPlaneOffset;</span><br><span class="line">        Matrix4x4 m = cam.worldToCameraMatrix;</span><br><span class="line">        Vector3 cpos = m.MultiplyPoint(offsetPos);</span><br><span class="line">        Vector3 cnormal = m.MultiplyVector(normal).normalized * sideSign;</span><br><span class="line"></span><br><span class="line">        return new Vector4(cnormal.x, cnormal.y, cnormal.z, -Vector3.Dot(cpos, cnormal));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Dictionary&lt;Camera, CommandBuffer&gt; _cameras = new Dictionary&lt;Camera, CommandBuffer&gt;();</span><br><span class="line"></span><br><span class="line">    void PostProcessTexture(Camera cam, RenderTexture source, RenderTexture dest)</span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">#if UNITY_EDITOR</span><br><span class="line">        if (_blurParamChanged)</span><br><span class="line">        &#123;</span><br><span class="line">            if (_cameras.ContainsKey(cam))</span><br><span class="line">                cam.RemoveCommandBuffer(CameraEvent.BeforeForwardOpaque, _cameras[cam]);</span><br><span class="line">            _cameras.Remove(cam);</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line">       </span><br><span class="line">        if (_cameras.ContainsKey(cam))</span><br><span class="line">            return;</span><br><span class="line"></span><br><span class="line">        CommandBuffer buf = new CommandBuffer();</span><br><span class="line">        buf.name = &quot;Blur Reflection Texture&quot;;</span><br><span class="line">        _cameras[cam] = buf; </span><br><span class="line">        float width = source.width;</span><br><span class="line">        float height = source.height;</span><br><span class="line">        int rtW = Mathf.RoundToInt(width / _downsample);</span><br><span class="line">        int rtH = Mathf.RoundToInt(height / _downsample);</span><br><span class="line"></span><br><span class="line">        int blurredID = Shader.PropertyToID(&quot;_Temp1&quot;);</span><br><span class="line">        int blurredID2 = Shader.PropertyToID(&quot;_Temp2&quot;);</span><br><span class="line">        buf.GetTemporaryRT(blurredID, rtW, rtH, 0, FilterMode.Bilinear, source.format);</span><br><span class="line">        buf.GetTemporaryRT(blurredID2, rtW, rtH, 0, FilterMode.Bilinear, source.format);</span><br><span class="line"></span><br><span class="line">        buf.Blit((Texture)source, blurredID);</span><br><span class="line">        for (int i = 0; i &lt; _blurIterations; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            float iterationOffs = (i * 1.0f);</span><br><span class="line">            buf.SetGlobalFloat(&quot;_Offset&quot;, iterationOffs / _downsample + _blurSize);</span><br><span class="line">            buf.Blit(blurredID, blurredID2, BlurMaterial, 0);</span><br><span class="line">            buf.Blit(blurredID2, blurredID, BlurMaterial, 0);</span><br><span class="line">        &#125;</span><br><span class="line">        buf.Blit(blurredID, dest);</span><br><span class="line"></span><br><span class="line">        buf.ReleaseTemporaryRT(blurredID);</span><br><span class="line">        buf.ReleaseTemporaryRT(blurredID2);</span><br><span class="line"></span><br><span class="line">        cam.AddCommandBuffer(CameraEvent.BeforeForwardOpaque, buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="视差卡片-5"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections.Generic;  </span><br><span class="line">using UnityEngine;  </span><br><span class="line">  </span><br><span class="line">public class CameraMovement : MonoBehaviour  </span><br><span class="line">&#123;  </span><br><span class="line">    public List&lt;Transform&gt; pathPoints;  </span><br><span class="line">    public float moveSpeed = 2.0f;  </span><br><span class="line">    public float rotationSpeed = 30.0f;  </span><br><span class="line">    private int currentIndex = 0;  </span><br><span class="line">    private Transform target;  </span><br><span class="line">    private bool isMoving = false;  </span><br><span class="line">  </span><br><span class="line">    private void Start()  </span><br><span class="line">    &#123;  </span><br><span class="line">        if (pathPoints != null &amp;&amp; pathPoints.Count &gt; 0)  </span><br><span class="line">        &#123;  </span><br><span class="line">            target = pathPoints[currentIndex];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    private void Update()  </span><br><span class="line">    &#123;  </span><br><span class="line">        // 检查是否按下空格键来启动或停止相机运动  </span><br><span class="line">        if (Input.GetKeyDown(KeyCode.Space))  </span><br><span class="line">        &#123;  </span><br><span class="line">            isMoving = !isMoving;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        if (!isMoving || target == null) return;  </span><br><span class="line">  </span><br><span class="line">        Vector3 directionToTarget = (target.position - transform.position).normalized;  </span><br><span class="line">        transform.Translate(directionToTarget * moveSpeed * Time.deltaTime, Space.World);  </span><br><span class="line">  </span><br><span class="line">        if (Vector3.Distance(transform.position, target.position) &lt; 0.1f)  </span><br><span class="line">        &#123;  </span><br><span class="line">            currentIndex = (currentIndex + 1) % pathPoints.Count;  </span><br><span class="line">            target = pathPoints[currentIndex];  </span><br><span class="line">  </span><br><span class="line">            Quaternion targetRotation = Quaternion.LookRotation(target.position - transform.position);  </span><br><span class="line">            transform.rotation = Quaternion.RotateTowards(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> Creation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Creation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客制作</title>
      <link href="/2024/07/11/%E5%88%B6%E4%BD%9C%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/07/11/%E5%88%B6%E4%BD%9C%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-获取服务器"><a href="#1-获取服务器" class="headerlink" title="1.获取服务器"></a>1.获取服务器</h2><p>可以从阿里云，百度云，腾讯云找一些服务器，也可以找一些私人的服务器</p><h2 id="2-安装ssh软件"><a href="#2-安装ssh软件" class="headerlink" title="2.安装ssh软件"></a>2.安装ssh软件</h2><p>推荐使用mobaxterm，</p><p>传输小文件时可以直接拖动</p><p>传输大型文件时，推荐使用可以使用sftp协议的软件，例如filezilla，</p><p>用户名为root，密码为服务器密码</p><h2 id="3-安装博客软件hexo"><a href="#3-安装博客软件hexo" class="headerlink" title="3.安装博客软件hexo"></a>3.安装博客软件hexo</h2><ul><li><p>第一步：指定node版本 ，curl —silent —location <a href="https://rpm.nodesource.com/setup_14.x">https://rpm.nodesource.com/setup_14.x</a> | sudo bash</p></li><li><p>sudo yum install <a href="https://rpm.nodesource.com/pub_16.x/nodistro/repo/nodesource-release-nodistro-1.noarch.rpm">https://rpm.nodesource.com/pub_16.x/nodistro/repo/nodesource-release-nodistro-1.noarch.rpm</a> -y<br>sudo yum install nodejs -y —setopt=nodesource-nodejs.module_hotfixes=1</p></li><li><p>第二步：安装node， sudo yum -y install nodejs</p></li><li><p>第三步：使用npm命令安装hexo， npm install hexo-cli -g</p></li><li><p>第四步：使用hexo创建一个博客系统 hexo init blog</p></li><li><p>第五步：使用，cd blog进入该目录</p></li><li><p>第六步：安装博客系统依赖程序使用，npm install</p></li><li><p>第七步：启动博客系统服务，hexo server或，hexo s               //默认端口为4000，可以使用-p + [端口号]指定端口，</p><p>使用公网ip      网页输入{公网ip}:4000 出现hexo首页即成功</p></li></ul><h2 id="4-编写博客内容"><a href="#4-编写博客内容" class="headerlink" title="4.编写博客内容"></a>4.编写博客内容</h2><p>下载typora编写.md文件，hexo博客会自动识别文件的内容</p><p>title: 标题</p><p>data: 日期</p><p>使用git 或mobaxterm文件上传博客内容</p><h2 id="5-选择博客主题界面"><a href="#5-选择博客主题界面" class="headerlink" title="5.选择博客主题界面"></a>5.选择博客主题界面</h2><p>更改博客主题</p><h3 id="5-1关于next"><a href="#5-1关于next" class="headerlink" title="5.1关于next"></a>5.1关于next</h3><p>Hexo是一款快速、简洁且高效的博客框架，拥有超快生成速度，支持 Markdown，一键部署和高度可扩展性。</p><p>Next 是一个高品质优雅的 Hexo 主题。本文介绍 Next 主题的安装和基本的配置。</p><h3 id="5-2下载next"><a href="#5-2下载next" class="headerlink" title="5.2下载next"></a>5.2下载next</h3><p>执行以下命令</p><p>cd themes </p><p>git clone <a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></p><h3 id="5-3更改参数配置"><a href="#5-3更改参数配置" class="headerlink" title="5.3更改参数配置"></a>5.3更改参数配置</h3><p>打开blog目录下的_config.yml文件</p><p>修改主题选择 theme: next  ##注意：theme后面加的是存放主题的文件夹名字</p><p>修改语言   language: zh-CN</p><h5 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h5><p>缓存支持</p><p>NexT v6+ 允许缓存内容生成。在 NexT 配置文件的 cache 部分设置 enable 为 true:</p><p>cache:<br>  enable: true<br>缩小支持</p><p>NexT 允许缩小 Hexo 生成。在 NexT 配置文件中将 minify 值设置为true:</p><p>minify: true</p><p><strong>选择 Scheme</strong></p><p>Scheme 是 NexT 支持的一个特性，通过使用 Scheme， NexT 可以提供不同的视图</p><p>在 Next 配置文件中搜索 scheme 找到配置的位置，然后配置你想要的 scheme。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><h5 id="自定义-Logo"><a href="#自定义-Logo" class="headerlink" title="自定义 Logo"></a>自定义 Logo</h5><p>您可以通过在 NexT 配置文件中将图像的 url 添加到 custom_logo 来启用它。</p><p>custom_logo: /images/logo.jpg</p><p>images 为站点根目录下 source 目录下创建的目录。如果目录不存在请创建它。</p><h5 id="自定义头像"><a href="#自定义头像" class="headerlink" title="自定义头像"></a>自定义头像</h5><p>您可以通过在 Next 配置文件中，设置 avatar 中的参数来启用它。</p><p>avatar:</p><p>Replace the default image and set the url here.</p><p>  url: /images/avatar.jpg</p><p>If true, the avatar will be displayed in circle.</p><p>  rounded: false</p><p>If true, the avatar will be rotated with the cursor.</p><p>  rotated: false</p><h5 id="设置导航菜单"><a href="#设置导航菜单" class="headerlink" title="设置导航菜单"></a>设置导航菜单</h5><p>默认情况下，所有菜单项都被注释掉，你可以通过设置 menu 中的参数来启用他。</p><p>menu:<br>  home: / || fa fa-home</p><h1 id="about-about-fa-fa-user"><a href="#about-about-fa-fa-user" class="headerlink" title="about: /about/ || fa fa-user"></a>about: /about/ || fa fa-user</h1><h1 id="tags-tags-fa-fa-tags"><a href="#tags-tags-fa-fa-tags" class="headerlink" title="tags: /tags/ || fa fa-tags"></a>tags: /tags/ || fa fa-tags</h1><h1 id="categories-categories-fa-fa-th"><a href="#categories-categories-fa-fa-th" class="headerlink" title="categories: /categories/ || fa fa-th"></a>categories: /categories/ || fa fa-th</h1><p>  archives: /archives/ || fa fa-archive</p><h1 id="schedule-schedule-fa-fa-calendar"><a href="#schedule-schedule-fa-fa-calendar" class="headerlink" title="schedule: /schedule/ || fa fa-calendar"></a>schedule: /schedule/ || fa fa-calendar</h1><h1 id="sitemap-sitemap-xml-fa-fa-sitemap"><a href="#sitemap-sitemap-xml-fa-fa-sitemap" class="headerlink" title="sitemap: /sitemap.xml || fa fa-sitemap"></a>sitemap: /sitemap.xml || fa fa-sitemap</h1><h1 id="commonweal-404-fa-fa-heartbeat"><a href="#commonweal-404-fa-fa-heartbeat" class="headerlink" title="commonweal: /404/ || fa fa-heartbeat"></a>commonweal: /404/ || fa fa-heartbeat</h1><p>除了主页和存档，菜单部分下的所有自定义页面都需要手动创建。</p><p>默认情况下 NexT 显示不带标识的菜单项图标。您可以通过编辑 menu_settings 中的值来配置它。</p><p>menu_settings:<br>  icons: true<br>  badges: false<br>设置值 badges 为 true，则显示菜单项中的 Posts / Categories / Tags 的计数。</p><h2 id="6-域名绑定"><a href="#6-域名绑定" class="headerlink" title="6.域名绑定"></a>6.域名绑定</h2><h2 id="7-问题总结"><a href="#7-问题总结" class="headerlink" title="7.问题总结"></a>7.问题总结</h2><h4 id="1-hexo启动的网站容易挂掉"><a href="#1-hexo启动的网站容易挂掉" class="headerlink" title="1.hexo启动的网站容易挂掉"></a>1.hexo启动的网站容易挂掉</h4><p>在启动目录下使用该命令nohup hexo server -p 4000 &amp;</p><h4 id="2-使用screen后台启动blog"><a href="#2-使用screen后台启动blog" class="headerlink" title="2.使用screen后台启动blog"></a>2.使用screen后台启动blog</h4><h6 id="screen定义：Screen是Linux下的一款远程会话管理工具，可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。"><a href="#screen定义：Screen是Linux下的一款远程会话管理工具，可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。" class="headerlink" title="screen定义：Screen是Linux下的一款远程会话管理工具，可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。"></a>screen定义：Screen是Linux下的一款远程会话管理工具，可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。</h6><p>即：screen会保持终端的运行</p><h5 id="2-1-CentOS系统安装命令"><a href="#2-1-CentOS系统安装命令" class="headerlink" title="2.1 CentOS系统安装命令"></a>2.1 CentOS系统安装命令</h5><p>yum install screen</p><p>使用which screen查看是否安装成功</p><h5 id="2-2-创建一个screen"><a href="#2-2-创建一个screen" class="headerlink" title="2.2 创建一个screen"></a>2.2 创建一个screen</h5><p>screen -S +[名字]</p><h5 id="2-3-查看screen的列表"><a href="#2-3-查看screen的列表" class="headerlink" title="2.3 查看screen的列表"></a>2.3 查看screen的列表</h5><p>screen -ls</p><h5 id="2-4-进入screen中"><a href="#2-4-进入screen中" class="headerlink" title="2.4 进入screen中"></a>2.4 进入screen中</h5><p>screen -r +[screen.id]或</p><p>screen -r +[名字]</p><h5 id="2-5-从screen界面退出"><a href="#2-5-从screen界面退出" class="headerlink" title="2.5 从screen界面退出"></a>2.5 从screen界面退出</h5><p>先按ctrl + a 再按d</p><h5 id="2-6-删除screen"><a href="#2-6-删除screen" class="headerlink" title="2.6 删除screen"></a>2.6 删除screen</h5><p>screen -S +[名字] -X quit</p><h5 id="2-7-擦除screen"><a href="#2-7-擦除screen" class="headerlink" title="2.7 擦除screen"></a>2.7 擦除screen</h5><p><strong>服务器重启之后</strong>，全部的screen均会挂掉，需要借助擦除命令，将所有挂掉的screen清除掉。</p><p>使用命令screen -wipe</p><h4 id="3-查看端口是否被占用"><a href="#3-查看端口是否被占用" class="headerlink" title="3.查看端口是否被占用"></a>3.查看端口是否被占用</h4><p>lsof -i:4000</p><h4 id="4-hexo启动成功，网页拒绝访问"><a href="#4-hexo启动成功，网页拒绝访问" class="headerlink" title="4.hexo启动成功，网页拒绝访问"></a>4.hexo启动成功，网页拒绝访问</h4><p>使用阿里云服务器时，按步骤安装并启动了hexo文件，启动成功，但是网页拒绝访问，根据阿里云工具提示http状态问题，所以可能权限有问题。</p><p>从网页的控制台中找到安全组，手动添加访问端口（也可以一次性选择全部，相当于添加白名单），保存之后便可以访问hexo网页。</p><h4 id="5-第三步一直卡着，不能进行下一步操作"><a href="#5-第三步一直卡着，不能进行下一步操作" class="headerlink" title="5.第三步一直卡着，不能进行下一步操作"></a>5.第三步一直卡着，不能进行下一步操作</h4><p>切换为淘宝源即可 ，npm config set registry <a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></p><p>6.使用yum安装失败</p><p>Error: Failed to download metadata for repo ‘appstream’: Cannot prepare internal mirrorlist: No URLs in mirrorlist</p><p>CentOS 已经停止维护的问题。2020 年 12 月 8 号，CentOS 官方宣布了停止维护 CentOS Linux 的计划，并推出了 CentOS Stream 项目，CentOS Linux 8 作为 RHEL 8 的复刻版本，生命周期缩短，于 2021 年 12 月 31 日停止更新并停止维护（EOL），更多的信息可以查看 CentOS 官方公告。如果需要更新 CentOS，需要将镜像从 mirror.centos.org 更改为 vault.centos.org<br>第一步</p><p>cd /etc/yum.repos.d/</p><p>第二步</p><p>sed -i ‘s/mirrorlist/#mirrorlist/g’ /etc/yum.repos.d/CentOS-<em><br>sed -i ‘s|#baseurl=<a href="http://mirror.centos.org|baseurl=http://vault.centos.org|g">http://mirror.centos.org|baseurl=http://vault.centos.org|g</a>‘ /etc/yum.repos.d/CentOS-</em><br>第三步</p><p>yum makecache</p><p>第四步</p><p>yum update -y</p><h5 id="升级node"><a href="#升级node" class="headerlink" title="升级node"></a>升级node</h5><p><a href="https://blog.csdn.net/weixin_38201500/article/details/124173797">Linux node 安装教程<em>linux node安装</em>围城少年的博客-CSDN博客</a></p><h4 id="make的安装"><a href="#make的安装" class="headerlink" title="make的安装"></a>make的安装</h4><p>1.先去<a href="http://ftp.gnu.org/gnu/make/make-4.2.tar.gz">http://ftp.gnu.org/gnu/make/make-4.2.tar.gz</a> 下载安装包；<br>2.进入/usr/local/bin/路径下，把安装包上传；</p><ol><li>tar -zxvf make-4.2.tar.gz<br>cd make-4.2<br>./configure<br>make<br>make install<br>ln -s -f /usr/local/bin/make-4.2/make /usr/bin/make</li></ol><h5 id="glibc安装"><a href="#glibc安装" class="headerlink" title="glibc安装"></a>glibc安装</h5><p>安装node的时候出现这些问题缺少依赖库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node: /lib64/libm.so.6: version `GLIBC_2.27&#x27; not found (required by node)</span><br><span class="line">node: /lib64/libc.so.6: version `GLIBC_2.25&#x27; not found (required by node)</span><br><span class="line">node: /lib64/libc.so.6: version `GLIBC_2.28&#x27; not found (required by node)</span><br><span class="line">node: /lib64/libstdc++.so.6: version `CXXABI_1.3.9&#x27; not found (required by node)</span><br><span class="line">node: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20&#x27; not found (required by node)</span><br><span class="line">node: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21&#x27; not found (required by node)</span><br></pre></td></tr></table></figure><p>在这里解决</p><p><a href="https://blog.csdn.net/qq_38225558/article/details/128641561">Error(25) 解决node: /lib64/libm.so.6: version `GLIBC_2.27‘ not found (required by node)-CSDN博客</a></p><h3 id="一键执行命令"><a href="#一键执行命令" class="headerlink" title="一键执行命令"></a>一键执行命令</h3><p>给该行命令添加别名，添加到脚本中长期有效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;alias hexos=&#x27;hexo cl &amp;&amp; hexo s -p 80&#x27;&quot; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>重新生效该脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Process </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Process </tag>
            
            <tag> ECS云服务器 </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题汇总</title>
      <link href="/2024/07/11/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2024/07/11/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h1><p>文章名不能带#号，否则文章不能输出</p>]]></content>
      
      
      <categories>
          
          <category> BUG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity—HDRP——4：LightMapping（光照烘培）</title>
      <link href="/2024/07/11/Unity%E2%80%94HDRP--4%EF%BC%9ALightMapping%EF%BC%88%E5%85%89%E7%85%A7%E7%83%98%E5%9F%B9%EF%BC%89/"/>
      <url>/2024/07/11/Unity%E2%80%94HDRP--4%EF%BC%9ALightMapping%EF%BC%88%E5%85%89%E7%85%A7%E7%83%98%E5%9F%B9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h1><ul><li>Process（HDRP project setting）</li><li>HDRP配置文件和Volume框架</li><li>HDRP Lighting System</li><li><strong>LightMapping（光照烘培）</strong></li><li>Material</li><li>PostProcessing</li><li>HDRPDebug</li><li>HDRP Real-Time Ray Tracing</li></ul><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul><li>什么是光照烘培?</li><li>什么是光照贴图？</li><li>为什么要用光照贴图？</li></ul><h2 id="渐进式光照贴图烘培对场景中的模型有什么要求？"><a href="#渐进式光照贴图烘培对场景中的模型有什么要求？" class="headerlink" title="渐进式光照贴图烘培对场景中的模型有什么要求？"></a>渐进式光照贴图烘培对场景中的模型有什么要求？</h2><ol><li>模型上不能有重叠的UV</li><li>UV之间要有足够的间距以避免渗色现象的发生</li><li>因为使用光照贴图只能烘培静态物体，所以要把需要参与烘培的物体标记为Static</li></ol><h2 id="进行渐进式光照贴图烘培时烘培出来的是什么？"><a href="#进行渐进式光照贴图烘培时烘培出来的是什么？" class="headerlink" title="进行渐进式光照贴图烘培时烘培出来的是什么？"></a>进行渐进式光照贴图烘培时烘培出来的是什么？</h2><p>烘培出来的时光照贴图，光照探针和反射探针</p><p>按照不同的LightingMode光照模式，烘培出来的结果是不同的，光照贴图中会包含 间接光照信息，也会包含软阴影和环境光遮蔽的信息。</p><p>可以选择两种光照模式</p><ol><li>BakedIndirect模式<ol><li>如果将场景中的光源设置为Mixed那么这些灯光会给场景提供直接光照，简介光照会被烘培到光照贴图和光照探针中，此模式下，会投射实时阴影</li></ol></li><li>Shadowmask模式<ol><li>与BakedIndirect区别是，能在运行时，将烘培所得到的阴影和实时阴影进行融合，可以获得最高质量的阴影，同时对性能和内存的要求也是最高的</li></ol></li></ol><h2 id="光照贴图烘培界面参数详解"><a href="#光照贴图烘培界面参数详解" class="headerlink" title="光照贴图烘培界面参数详解"></a>光照贴图烘培界面参数详解</h2><h2 id="如何解决光照贴图接缝问题"><a href="#如何解决光照贴图接缝问题" class="headerlink" title="如何解决光照贴图接缝问题"></a>如何解决光照贴图接缝问题</h2><p>由于GPU无法在分开的光照贴图之间混合纹理</p><p>启用MeshRenderer组件中的StitchSeams选项，勾选会增加烘培时间</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unity </tag>
            
            <tag> Process </tag>
            
            <tag> High Definition Render Pipline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity—HDRP——3：HDRP Lighting System</title>
      <link href="/2024/07/11/Unity%E2%80%94HDRP--3%EF%BC%9AHDRP%20Lighting%20System/"/>
      <url>/2024/07/11/Unity%E2%80%94HDRP--3%EF%BC%9AHDRP%20Lighting%20System/</url>
      
        <content type="html"><![CDATA[<h1 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h1><ul><li>Process（HDRP project setting）</li><li>HDRP配置文件和Volume框架</li><li><strong>HDRP Lighting System</strong></li><li>LightMapping（光照烘培）</li><li>Material</li><li>PostProcessing</li><li>HDRPDebug</li><li>HDRP Real-Time Ray Tracing</li></ul><h1 id="HDRP-Lighting-System"><a href="#HDRP-Lighting-System" class="headerlink" title="HDRP Lighting System"></a>HDRP Lighting System</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>在HDRP中如何给场景打光</p><h2 id="流程步骤"><a href="#流程步骤" class="headerlink" title="流程步骤"></a>流程步骤</h2><ol><li>场景主要分为四个部分<ul><li>Cameras</li><li>Models</li><li>Light&amp;Probes</li><li>Volumes</li></ul></li><li>启用Scene Settings Volume<img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/img/202406281522831.png" alt=""></li><li>启用Directional Light<img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/img/202406281523050.png" alt=""></li><li>启用Volume中的自动曝光控制<img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/img/202406281524263.png" alt=""></li><li>启用所有自己设置的光源</li><li>启用场景中所有的反射探针<ol><li>烘培之前确保参与烘培的物体被标记为Static</li></ol></li><li>启用场景中的光照探针组</li><li>完成整个场景的光照烘培<ul><li>光照贴图烘培<ol><li>Environment<ul><li>可以使用环境光Volume，前提是Volume必须包含一个sky相关的Override</li></ul></li><li>Mixed Lighting<ul><li>想要烘培全局光照，必须要勾选Baked Global Illumination</li><li>shadowmask和Baked Indirect区别是Shaowmask是实时的，并且消耗高</li></ul></li><li>Lightmapping Setting</li><li>AutoGenerate（一般不建议勾选此项）</li><li>Generate Lighting按钮</li><li>烘培数据展示区</li></ol></li><li>实时光线追踪</li></ul></li><li>增强间接光强度<ul><li>启用Scene Settings Volume</li></ul></li><li>处理阴影和环境光遮蔽、<ol><li>只启用平行光的Shadow map选项，画面中的阴影会比较硬</li><li>设置阴影效果首先看一下AngularDiameter参数</li><li>设置接触阴影可以增加阴影细节</li><li>除了灯光投射的阴影，还可以添加MicroShadows，可以用于调整阴影的透明度</li><li>最后提娜佳Ambient Occlusion</li></ol></li><li>添加雾效，在Volume组件中启用Fog重载</li><li>画面抗锯齿处理</li><li>添加后处理Volume组件</li></ol><h2 id="Night-Lighting场景打光步骤"><a href="#Night-Lighting场景打光步骤" class="headerlink" title="Night_Lighting场景打光步骤"></a>Night_Lighting场景打光步骤</h2><ol><li>修改Directional Light设置<ol><li>将平行光色温和强度调整为月光的色温和强度</li></ol></li><li>修改天空盒HDRI图</li><li>修改曝光设置</li><li>修改雾效设置</li><li>修改接触阴影设置</li><li>ColorAdjustments颜色设置</li><li>修改白平衡设置</li></ol><h2 id="光源类型和模式"><a href="#光源类型和模式" class="headerlink" title="光源类型和模式"></a>光源类型和模式</h2><ol><li>SpotLight</li><li>DurectionalLight</li><li>PointLight</li><li>AreaLight</li><li>自发光</li></ol><h3 id="制作和使用LightCookie为灯光添加更多细节"><a href="#制作和使用LightCookie为灯光添加更多细节" class="headerlink" title="制作和使用LightCookie为灯光添加更多细节"></a>制作和使用LightCookie为灯光添加更多细节</h3><h2 id="光照相关的常见问题"><a href="#光照相关的常见问题" class="headerlink" title="光照相关的常见问题"></a>光照相关的常见问题</h2><h3 id="为什么场景中会出现奇怪的阴影快"><a href="#为什么场景中会出现奇怪的阴影快" class="headerlink" title="为什么场景中会出现奇怪的阴影快"></a>为什么场景中会出现奇怪的阴影快</h3><h3 id="为什么在相机镜头移动时场景中的阴影会扭曲或闪烁"><a href="#为什么在相机镜头移动时场景中的阴影会扭曲或闪烁" class="headerlink" title="为什么在相机镜头移动时场景中的阴影会扭曲或闪烁"></a>为什么在相机镜头移动时场景中的阴影会扭曲或闪烁</h3><h3 id="未启用体积光的HighQuality选项，为什么编辑器中的灯光雾效会有那么多噪点"><a href="#未启用体积光的HighQuality选项，为什么编辑器中的灯光雾效会有那么多噪点" class="headerlink" title="未启用体积光的HighQuality选项，为什么编辑器中的灯光雾效会有那么多噪点"></a>未启用体积光的HighQuality选项，为什么编辑器中的灯光雾效会有那么多噪点</h3><h3 id="启用高质量选项对性能影响到底有多大"><a href="#启用高质量选项对性能影响到底有多大" class="headerlink" title="启用高质量选项对性能影响到底有多大"></a>启用高质量选项对性能影响到底有多大</h3><h2 id="光源分层"><a href="#光源分层" class="headerlink" title="光源分层"></a>光源分层</h2><h3 id="光源分层的作用"><a href="#光源分层的作用" class="headerlink" title="光源分层的作用"></a>光源分层的作用</h3><ol><li>让光源只照亮场景中指定的物体，并投射阴影</li><li>让光源只照亮指定的物体，但是让其他物体投射阴影</li></ol><h2 id="使用光照探针"><a href="#使用光照探针" class="headerlink" title="使用光照探针"></a>使用光照探针</h2><h3 id="为什么要使用光照探针"><a href="#为什么要使用光照探针" class="headerlink" title="为什么要使用光照探针"></a>为什么要使用光照探针</h3><p>光照烘培可以为场景中的静态物体烘培间接光照信息，但是如何为场景中的动态物体提供间接光照信息呢？</p><p>具体作用：</p><ol><li>为静态物体提供间接光照信息</li><li>为场景中那些小的物体提供间接光照信息，如果让这些小物体参与光照贴图烘培，会因为占用光照贴图空间而导致光照贴图尺寸变大，进而导致内存占用升高影响运行性能</li></ol><p>对于小物体</p><ol><li>启用MeshRenderer组件的Contribute Global Illumination选项，让网格参与全局光烘培</li><li>将ReceiveGlobalillumination（获取全局光的方式）设置为LightProbes，所以网格本身从烘培所得的间接光照信息不会被保存到光照贴图中<ol><li><strong>注意</strong>：在烘培时，将MeshRenderer设置为从Lightmaps获取全局光照信息，待烘培完成再切换成LightProbes，此时光照探针不会起作用</li></ol></li><li>为场景中的移动物体提供间接光照信息</li></ol><h3 id="使用光照探针组的基本步骤"><a href="#使用光照探针组的基本步骤" class="headerlink" title="使用光照探针组的基本步骤"></a>使用光照探针组的基本步骤</h3><ol><li>创造光照探针组</li><li>通过光照烘培完成间接光的生成<ol><li>要想让光照探针起作用，首先需要完成对整个场景的烘培</li></ol></li><li>调整光照探针组<ul><li>如果调整了光照探针组，就需要重新烘培场景</li><li>如果没有设置场景中的物体从Lightmaps获取全局光照信息，则默认情况下会使用LightProbes来获取间接光照信息</li><li>光照探针摆放有一定的原则，否则容易穿帮<ul><li>在明暗交界的地方要多放一些光照探针</li><li>因为接受光照探针间接光的物体会针对离它最近的4个探针进行采样，所以探针之间的间距要合理</li></ul></li></ul></li></ol><h3 id="MeshRenderer组件中的Probes选项详解"><a href="#MeshRenderer组件中的Probes选项详解" class="headerlink" title="MeshRenderer组件中的Probes选项详解"></a>MeshRenderer组件中的Probes选项详解</h3><p>如何使用MeshRenderer组件的AnchorOverride参数</p><h2 id="使用ReflectionProbe为场景提供反射信息"><a href="#使用ReflectionProbe为场景提供反射信息" class="headerlink" title="使用ReflectionProbe为场景提供反射信息"></a>使用ReflectionProbe为场景提供反射信息</h2><h3 id="ScreenSpaceReflection（屏幕空间反射）"><a href="#ScreenSpaceReflection（屏幕空间反射）" class="headerlink" title="ScreenSpaceReflection（屏幕空间反射）"></a>ScreenSpaceReflection（屏幕空间反射）</h3><h3 id="Reflection-Probe（反射探针）"><a href="#Reflection-Probe（反射探针）" class="headerlink" title="Reflection Probe（反射探针）"></a>Reflection Probe（反射探针）</h3><h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><h3 id="阴影的种类和三种光照模式"><a href="#阴影的种类和三种光照模式" class="headerlink" title="阴影的种类和三种光照模式"></a>阴影的种类和三种光照模式</h3><p>HDRP中的阴影可以分为两类</p><ol><li>场景中光源投射的阴影</li><li>基于屏幕空间信息计算的阴影</li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unity </tag>
            
            <tag> Process </tag>
            
            <tag> High Definition Render Pipline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity—HDRP——2：HDRP配置文件和Volume框架</title>
      <link href="/2024/07/11/Unity%E2%80%94HDRP--2%EF%BC%9AHDRP%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8CVolume%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/07/11/Unity%E2%80%94HDRP--2%EF%BC%9AHDRP%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8CVolume%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h1><ul><li>Process（HDRP project setting）</li><li><strong>HDRP配置文件和Volume框架</strong></li><li>HDRP Lighting System</li><li>LightMapping（光照烘培）</li><li>Material</li><li>PostProcessing</li><li>HDRPDebug</li><li>HDRP Real-Time Ray Tracing</li></ul><h1 id="HDRP配置文件和Volume框架"><a href="#HDRP配置文件和Volume框架" class="headerlink" title="HDRP配置文件和Volume框架"></a>HDRP配置文件和Volume框架</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>主要作用就是用来管理HDRP的所有渲染功能，首先会使用HDRP的配置文件生成一个HDRP的渲染管线实例，而这个渲染管线的实例则包含用于渲染的中间资源。</p><h2 id="FrameSettings（帧设置）"><a href="#FrameSettings（帧设置）" class="headerlink" title="FrameSettings（帧设置）"></a>FrameSettings（帧设置）</h2><p>帧设置主要针对场景中的Camera、Baked or Custom Reflection和Realtime Reflection的相关设置。</p><p>帧设置的优先级低于HDRP配置文件，即HDRP文件中没有打开某项功能，那么帧设置中对应的功能会被自动禁用。默认帧设置参数如下<img src="https://yin-qin.oss-cn-shanghai.aliyuncs.com/img/202406271653876.png" alt="image-20240627134815573"></p><p>可在下拉选项中进行设置</p><h2 id="Volume框架"><a href="#Volume框架" class="headerlink" title="Volume框架"></a>Volume框架</h2><p>Volume的作用是通过调整各项HDRP参数，影响相机所看到的画面的最终渲染效果。</p><p>Volume的优先级低于帧设置，即假如在当前相机的帧设置中没有打开某项功能，那么在Volume中对相关功能的调整是不起作用的。</p><h3 id="Rendering（渲染）"><a href="#Rendering（渲染）" class="headerlink" title="Rendering（渲染）"></a>Rendering（渲染）</h3><h4 id="1-Color-Buffer-Format（颜色缓存格式）"><a href="#1-Color-Buffer-Format（颜色缓存格式）" class="headerlink" title="1.Color Buffer Format（颜色缓存格式）"></a>1.Color Buffer Format（颜色缓存格式）</h4><p>出于性能考虑，HDRP默认使用R11G11B10格式（不含Alpha通道）</p><p>如果要把HDRP渲染的画面合成到另外的图片上，就需要包含Alpha通道，这时就要选择R16G16B16A16</p><h4 id="2-Lit-Shader-Mode（Lit着色器模式）"><a href="#2-Lit-Shader-Mode（Lit着色器模式）" class="headerlink" title="2.Lit Shader Mode（Lit着色器模式）"></a>2.Lit Shader Mode（Lit着色器模式）</h4><ul><li>Forward</li><li>Deferred</li><li>Both<ul><li>选择Both会让HDRP编译其他两种渲染方式着色器的变体</li></ul></li></ul><p>选择Forward或Both模式，可以选择MSAA抗锯齿效果</p><h4 id="3-Motion-Vectors（运动矢量）"><a href="#3-Motion-Vectors（运动矢量）" class="headerlink" title="3.Motion Vectors（运动矢量）"></a>3.Motion Vectors（运动矢量）</h4><p>HDRP可以在屏幕空间反射和运动模糊中使用运动矢量，通过Camera组件启用的TAA必须使用运动矢量才能正常工作。</p><h4 id="4-Runtime-Debug-Display（运行时Debug显示）"><a href="#4-Runtime-Debug-Display（运行时Debug显示）" class="headerlink" title="4.Runtime Debug Display（运行时Debug显示）"></a>4.Runtime Debug Display（运行时Debug显示）</h4><p>可以在运行时显示灯光和材质的属性信息，会增加构建时间和着色器内存占用</p><h4 id="5-Dithering-Cross-fade-（平滑转换）"><a href="#5-Dithering-Cross-fade-（平滑转换）" class="headerlink" title="5.Dithering Cross-fade （平滑转换）"></a>5.Dithering Cross-fade （平滑转换）</h4><p>HDRP在做LOD转换时进行平滑的转换</p><h4 id="6-Terraub-Hole（地形洞）"><a href="#6-Terraub-Hole（地形洞）" class="headerlink" title="6.Terraub Hole（地形洞）"></a>6.Terraub Hole（地形洞）</h4><p>启动后可以显示地形上的凹陷孔洞</p><h4 id="7-Transparent-Backface（透明背面）"><a href="#7-Transparent-Backface（透明背面）" class="headerlink" title="7.Transparent Backface（透明背面）"></a>7.Transparent Backface（透明背面）</h4><p>如果场景中没有使用透明材质或者不会渲染透明材质的背面。则可以禁用来减少构建时间</p><p>此功能与Lit材质中的BackThenFrontRendering相关联，启用透明背面之后，材质中的这个选项才会有效果</p><h4 id="8-Transparent-Depth-Prepass（透明深度预处理）"><a href="#8-Transparent-Depth-Prepass（透明深度预处理）" class="headerlink" title="8.Transparent Depth Prepass（透明深度预处理）"></a>8.Transparent Depth Prepass（透明深度预处理）</h4><p>如果你的场景中没有使用透明材质，禁用此选项减少构建时间。</p><h4 id="9-Transparent-Depth-Postpass（透明深度后处理）"><a href="#9-Transparent-Depth-Postpass（透明深度后处理）" class="headerlink" title="9.Transparent Depth Postpass（透明深度后处理）"></a>9.Transparent Depth Postpass（透明深度后处理）</h4><p>如果你的场景中没有使用透明材质，禁用此选项减少构建时间。</p><h4 id="10-Custom-Pass（自定义通道）"><a href="#10-Custom-Pass（自定义通道）" class="headerlink" title="10.Custom Pass（自定义通道）"></a>10.Custom Pass（自定义通道）</h4><p>如果没有使用Custom Pass功能，则禁用此功能可以节约内存</p><h4 id="11-Realtime-Raytracing（实时光线追踪）"><a href="#11-Realtime-Raytracing（实时光线追踪）" class="headerlink" title="11.Realtime Raytracing（实时光线追踪）"></a>11.Realtime Raytracing（实时光线追踪）</h4><p>如果要在HDRP中使用实时光纤追踪功能，则要先启动此选项</p><h4 id="12-LOD-Bias（LOD偏差）"><a href="#12-LOD-Bias（LOD偏差）" class="headerlink" title="12.LOD Bias（LOD偏差）"></a>12.LOD Bias（LOD偏差）</h4><p>场景中的相机会使用此数值来计算LOD偏差</p><h4 id="13-Maximum-LOD-Level（最大LOD级别）"><a href="#13-Maximum-LOD-Level（最大LOD级别）" class="headerlink" title="13.Maximum LOD Level（最大LOD级别）"></a>13.Maximum LOD Level（最大LOD级别）</h4><p>用于设置相机支持的最大LOD级别</p><h4 id="14-Decals（贴花）"><a href="#14-Decals（贴花）" class="headerlink" title="14.Decals（贴花）"></a>14.Decals（贴花）</h4><p>调整与贴花相关的设置</p><ul><li>Draw Distance（渲染距离）</li><li>Atlas Width和Atlas Height</li><li>Metal and Ambient Occlusion Properties</li><li>Maximum Clustered Decals on Screen</li></ul><h4 id="15-Dynamic-Resolution（动态分辨率）"><a href="#15-Dynamic-Resolution（动态分辨率）" class="headerlink" title="15.Dynamic Resolution（动态分辨率）"></a>15.Dynamic Resolution（动态分辨率）</h4><h4 id="16-Low-res-Transparency（低分辨率透明）"><a href="#16-Low-res-Transparency（低分辨率透明）" class="headerlink" title="16.Low res Transparency（低分辨率透明）"></a>16.Low res Transparency（低分辨率透明）</h4><h3 id="Lighting（光照）"><a href="#Lighting（光照）" class="headerlink" title="Lighting（光照）"></a>Lighting（光照）</h3><h3 id="Lighting-Quality-Settings（光照质量设置）"><a href="#Lighting-Quality-Settings（光照质量设置）" class="headerlink" title="Lighting Quality Settings（光照质量设置）"></a>Lighting Quality Settings（光照质量设置）</h3><h3 id="Material（材质）"><a href="#Material（材质）" class="headerlink" title="Material（材质）"></a>Material（材质）</h3><h3 id="Post-Processing（后处理）"><a href="#Post-Processing（后处理）" class="headerlink" title="Post-Processing（后处理）"></a>Post-Processing（后处理）</h3><h3 id="Post-processing-Quality-Setting（后处理质量设置）"><a href="#Post-processing-Quality-Setting（后处理质量设置）" class="headerlink" title="Post-processing Quality Setting（后处理质量设置）"></a>Post-processing Quality Setting（后处理质量设置）</h3><h2 id="针对不同平台使用不同的HDRP配置"><a href="#针对不同平台使用不同的HDRP配置" class="headerlink" title="针对不同平台使用不同的HDRP配置"></a>针对不同平台使用不同的HDRP配置</h2><h1 id="Volume框架详解"><a href="#Volume框架详解" class="headerlink" title="Volume框架详解"></a>Volume框架详解</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>为场景设置来自天空盒的光照</li><li>设置各种阴影效果</li><li>设置场景中的雾效</li><li>设置基于屏幕空间的反射和折射</li><li>设置后处理效果</li><li>设置实时光线追踪</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>创建一个空的GameObject，然后添加Volume组件，并添加各种所需的重载（override）</li><li>Global模式和Local模式<ol><li>Global模式是全局生效</li><li>Local模式是碰撞范围内生效</li></ol></li><li>要让Volume组件生效，需要将参数保存到一个配置文件中来</li></ol><h2 id="参数类别"><a href="#参数类别" class="headerlink" title="参数类别"></a>参数类别</h2><p>一共分为九个参数</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unity </tag>
            
            <tag> Process </tag>
            
            <tag> High Definition Render Pipline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity基本知识</title>
      <link href="/2024/07/11/Unity/"/>
      <url>/2024/07/11/Unity/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE基本知识</title>
      <link href="/2024/07/11/UE/"/>
      <url>/2024/07/11/UE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Unreal Engine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unreal Engine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trick</title>
      <link href="/2024/07/11/Trick/"/>
      <url>/2024/07/11/Trick/</url>
      
        <content type="html"><![CDATA[<h1 id="范围检测"><a href="#范围检测" class="headerlink" title="范围检测"></a>范围检测</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"> </span><br><span class="line">public class RangeCheck</span><br><span class="line">&#123;</span><br><span class="line">    //--扇形</span><br><span class="line">    public static bool CurveRange(Transform self, Transform target, float maxDistance, float maxAngle)</span><br><span class="line">    &#123;</span><br><span class="line">        return CurveRange(self, target, 0, maxDistance, maxAngle);</span><br><span class="line">    &#125;</span><br><span class="line">    public static bool CurveRange(Transform self, Transform target, float minDistance, float maxDistance, float maxAngle)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 playerDir = self.forward;</span><br><span class="line">        Vector3 enemydir = (target.position - self.position).normalized;</span><br><span class="line">        float angle = Vector3.Angle(playerDir, enemydir);</span><br><span class="line">        if (angle &gt; maxAngle * 0.5f)</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        float distance = Vector3.Distance(target.position, self.position);</span><br><span class="line">        if (distance &lt;= maxDistance &amp;&amp; distance &gt;= minDistance)</span><br><span class="line">        &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    //--圆形</span><br><span class="line">    public static bool CircleRange(Transform self, Transform target, float maxDistance)</span><br><span class="line">    &#123;</span><br><span class="line">        return CircleRange(self, target, 0, maxDistance);</span><br><span class="line">    &#125;</span><br><span class="line">    public static bool CircleRange(Transform self, Transform target, float minDistance, float maxDistance)</span><br><span class="line">    &#123;</span><br><span class="line">        float distance = Vector3.Distance(target.position, self.position);</span><br><span class="line">        if (distance &lt;= maxDistance &amp;&amp; distance &gt;= minDistance)</span><br><span class="line">        &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //--矩形</span><br><span class="line">    public static bool SquareRange(Transform self, Transform target, float maxWidth, float maxHeight)</span><br><span class="line">    &#123;</span><br><span class="line">        return SquareRange(self, target, maxWidth, 0, maxHeight);</span><br><span class="line">    &#125;</span><br><span class="line">    public static bool SquareRange(Transform self, Transform target, float maxWidth, float minHeight, float maxHeight)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 enemyDir = (target.position - self.position).normalized;</span><br><span class="line">        float angle = Vector3.Angle(enemyDir, self.forward);</span><br><span class="line">        if (angle &gt; 90)</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        float distance = Vector3.Distance(target.position, self.position);</span><br><span class="line">        float z = distance * Mathf.Cos(angle * Mathf.Deg2Rad);</span><br><span class="line">        float x = distance * Mathf.Sin(angle * Mathf.Deg2Rad);</span><br><span class="line">        if (x &lt;= maxWidth * 0.5f &amp;&amp; z &lt;= maxHeight &amp;&amp; z &gt;= minHeight)</span><br><span class="line">        &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    //--等腰三角形</span><br><span class="line">    public static bool TriangleRange(Transform self, Transform target, float maxDistance, float maxAngle)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 playerDir = self.forward;</span><br><span class="line">        Vector3 enemydir = (target.position - self.position).normalized;</span><br><span class="line">        float angle = Vector3.Angle(playerDir, enemydir);</span><br><span class="line">        if (angle &gt; maxAngle * 0.5f)</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        float angleDistance = maxDistance * Mathf.Cos(maxAngle * 0.5f * Mathf.Deg2Rad) / Mathf.Cos(angle * Mathf.Deg2Rad);</span><br><span class="line">        float distance = Vector3.Distance(target.position, self.position);</span><br><span class="line">        if (distance &lt;= angleDistance)</span><br><span class="line">        &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="视锥体剔除"><a href="#视锥体剔除" class="headerlink" title="视锥体剔除"></a>视锥体剔除</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class MyCull : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private Camera _camera;</span><br><span class="line">    public Transform parentTrans;</span><br><span class="line">    private Renderer[] meshRenders;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        _camera = GetComponent&lt;Camera&gt;();</span><br><span class="line">        meshRenders = parentTrans.GetComponentsInChildren&lt;MeshRenderer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">Plane[] cameraPlane = GeometryUtility.CalculateFrustumPlanes(_camera);//得到摄像机的视锥平面</span><br><span class="line">        foreach (var item in meshRenders)</span><br><span class="line">        &#123;</span><br><span class="line">            Bounds bounds = item.bounds;</span><br><span class="line">            bool isShow = GeometryUtility.TestPlanesAABB(cameraPlane,bounds);//判断是否在摄像机的视锥体中</span><br><span class="line">            item.enabled = isShow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown</title>
      <link href="/2024/07/11/MarkDown/"/>
      <url>/2024/07/11/MarkDown/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h1><h2 id="Front-Matter模板"><a href="#Front-Matter模板" class="headerlink" title="Front Matter模板"></a>Front Matter模板</h2><p><a href="https://blog.csdn.net/liudonglovehemin/article/details/131095922">基于Hexo和Butterfly创建个人技术博客，(10) 使用Butterfly的Tags Plugin插件增强博客文章内容和视觉表现力_hexo+butterfly创建分类目录-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">title: </span><br><span class="line">data: 2024-03-18</span><br><span class="line">tags: </span><br><span class="line">categories: </span><br><span class="line">description:</span><br><span class="line">cover: </span><br><span class="line">top_img:</span><br><span class="line">comments: </span><br><span class="line">keywords: </span><br><span class="line">aside: </span><br><span class="line">toc: </span><br><span class="line">swiper_index: 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">title: 文章标题</span><br><span class="line">author: 作者名</span><br><span class="line">data: 2024-03-18</span><br><span class="line">updated: 更新日期</span><br><span class="line">tags: </span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">categories: 分类</span><br><span class="line">reward: 打赏（true/false）</span><br><span class="line">description: 描述</span><br><span class="line">cover: 封面</span><br><span class="line">top_img: 顶部图片</span><br><span class="line">comments: 评论（true/flase）</span><br><span class="line">keywords: 关键字</span><br><span class="line">aside: 侧边栏显示</span><br><span class="line">toc: 文章目录</span><br><span class="line">swiper_index: 优先顺序</span><br><span class="line"></span><br><span class="line">type : 页面类型</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><h3 id="butterfly标签外挂"><a href="#butterfly标签外挂" class="headerlink" title="butterfly标签外挂"></a>butterfly标签外挂</h3><h4 id="行内文本"><a href="#行内文本" class="headerlink" title="行内文本"></a>行内文本</h4><div class="tabs" id="行内文本"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="行内文本-1">渲染效果</button><button type="button" class="tab " data-href="行内文本-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="行内文本-1"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul></div><div class="tab-item-content" id="行内文本-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line">2. 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line">3. 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line">4. 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line">5. 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line">6. 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br><span class="line">- 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line">- 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="分栏"><a href="#分栏" class="headerlink" title="分栏"></a>分栏</h4><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">展示效果</button><button type="button" class="tab " data-href="分栏-2">源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><div class="tabs" id="test"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test-1">1</button><button type="button" class="tab " data-href="test-2">2</button><button type="button" class="tab " data-href="test-3">test 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>This is Tab 1</p></div><div class="tab-item-content" id="test-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="分栏-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test %&#125;</span><br><span class="line">&lt;!-- tab 1--&gt;</span><br><span class="line">This is Tab 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 2--&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="折叠框"><a href="#折叠框" class="headerlink" title="折叠框"></a>折叠框</h4><div class="tabs" id="折叠框"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="折叠框-1">渲染效果</button><button type="button" class="tab " data-href="折叠框-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="折叠框-1"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details></div><div class="tab-item-content" id="折叠框-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line">- haha</span><br><span class="line">- hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha &lt;span&gt;&lt;img src=&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27; style=&#x27;height:24px&#x27;&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="提示块标签"><a href="#提示块标签" class="headerlink" title="提示块标签"></a>提示块标签</h4><div class="tabs" id="提示块标签"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="提示块标签-1">渲染效果</button><button type="button" class="tab " data-href="提示块标签-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="提示块标签-1"><div class="note default simple"><p>default 提示块标签</p></div></div><div class="tab-item-content" id="提示块标签-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><div class="tabs" id="引用"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="引用-1">渲染效果</button><button type="button" class="tab " data-href="引用-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="引用-1"><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div></div><div class="tab-item-content" id="引用-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="上标标签"><a href="#上标标签" class="headerlink" title="上标标签"></a>上标标签</h4><div class="tabs" id="上标标签"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="上标标签-1">渲染效果</button><button type="button" class="tab " data-href="上标标签-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="上标标签-1"><div class="tip success"><p>success</p></div></div><div class="tab-item-content" id="上标标签-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="复选列表"><a href="#复选列表" class="headerlink" title="复选列表"></a>复选列表</h4><div class="tabs" id="复选列表"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="复选列表-1">渲染效果</button><button type="button" class="tab " data-href="复选列表-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="复选列表-1"><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div></div><div class="tab-item-content" id="复选列表-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="单选列表"><a href="#单选列表" class="headerlink" title="单选列表"></a>单选列表</h4><div class="tabs" id="单选列表"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="单选列表-1">渲染效果</button><button type="button" class="tab " data-href="单选列表-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="单选列表-1"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div></div><div class="tab-item-content" id="单选列表-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="记号笔注释"><a href="#记号笔注释" class="headerlink" title="记号笔注释"></a>记号笔注释</h4><div class="tabs" id="记号笔注释"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="记号笔注释-1">渲染效果</button><button type="button" class="tab " data-href="记号笔注释-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="记号笔注释-1"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span>&lt;/span&gt;，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局”，用来为盒状模型提供最大的灵活性”</span>&lt;/span&gt;，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span>&lt;/span&gt;，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span>&lt;/span&gt;写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span>&lt;/span&gt;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p></div><div class="tab-item-content" id="记号笔注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="链接卡片"><a href="#链接卡片" class="headerlink" title="链接卡片"></a>链接卡片</h4><div class="tabs" id="链接卡片"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="链接卡片-1">渲染效果</button><button type="button" class="tab " data-href="链接卡片-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="链接卡片-1"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div></div><div class="tab-item-content" id="链接卡片-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="网站卡片"><a href="#网站卡片" class="headerlink" title="网站卡片"></a>网站卡片</h4><div class="tabs" id="网站卡片"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="网站卡片-1">渲染效果</button><button type="button" class="tab " data-href="网站卡片-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="网站卡片-1"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div></div><div class="tab-item-content" id="网站卡片-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><div class="tabs" id="音频"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="音频-1">渲染效果</button><button type="button" class="tab " data-href="音频-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="音频-1"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></div><div class="tab-item-content" id="音频-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><div class="tabs" id="视频"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="视频-1">渲染效果</button><button type="button" class="tab " data-href="视频-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="视频-1"><div class="videos"><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202404170857702.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/CartoonDance.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-item-content" id="视频-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="相册图库"><a href="#相册图库" class="headerlink" title="相册图库"></a>相册图库</h4><div class="tabs" id="相册图库"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="相册图库-1">渲染效果</button><button type="button" class="tab " data-href="相册图库-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="相册图库-1"><div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/img-url' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">name</div>  <p>description</p>  <a href='/link'></a>  </figcaption>  </figure><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/img-url' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">name</div>  <p>description</p>  <a href='/link'></a>  </figcaption>  </figure><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/img-url' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">name</div>  <p>description</p>  <a href='/link'></a>  </figcaption>  </figure></div></div><div class="tab-item-content" id="相册图库-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="展示画廊Gallery"><a href="#展示画廊Gallery" class="headerlink" title="展示画廊Gallery"></a>展示画廊Gallery</h4><div class="tabs" id="展示画廊gallery"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="展示画廊gallery-1">渲染效果</button><button type="button" class="tab " data-href="展示画廊gallery-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="展示画廊gallery-1"><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg","alt":""}]</div>      <div class="gallery-items">      </div>    </div></div><div class="tab-item-content" id="展示画廊gallery-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><div class="tabs" id="按钮"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="按钮-1">渲染效果</button><button type="button" class="tab " data-href="按钮-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="按钮-1"><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div></div><div class="tab-item-content" id="按钮-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="诗词标签"><a href="#诗词标签" class="headerlink" title="诗词标签"></a>诗词标签</h4><div class="tabs" id="诗词标签"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="诗词标签-1">渲染效果</button><button type="button" class="tab " data-href="诗词标签-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="诗词标签-1"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。</p></div></div><div class="tab-item-content" id="诗词标签-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="时间轴样式"><a href="#时间轴样式" class="headerlink" title="时间轴样式"></a>时间轴样式</h4><div class="tabs" id="时间轴样式"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="时间轴样式-1">渲染效果</button><button type="button" class="tab " data-href="时间轴样式-2">源码示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="时间轴样式-1"><div class="note blue no-icon flat"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div></div></div><div class="tab-item-content" id="时间轴样式-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note blue no-icon %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [2.6.6 -&gt; 3.0](https://github.com/volantis-x/hexo-theme-volantis/releases) --&gt;</span><br><span class="line"></span><br><span class="line">1. 如果有 `hexo-lazyload-image` 插件，需要删除并重新安装最新版本，设置 `lazyload.isSPA: true`。</span><br><span class="line">2. 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 `use_cdn: true` 则需要删除。</span><br><span class="line">3. 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line">4. 2.x 版本的置顶 `top: true` 改为了 `pin: true`，并且同样适用于 `layout: page` 的页面。</span><br><span class="line">5. 如果使用了 `hexo-offline` 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [2.6.3 -&gt; 2.6.6](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [2.6.2 -&gt; 2.6.3](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --&gt;</span><br><span class="line"></span><br><span class="line">1. 全局搜索 `seotitle` 并替换为 `seo_title`。</span><br><span class="line">2. group 组件的索引规则有变，使用 group 组件的文章内，`group: group_name` 对应的组件名必须是 `group_name`。</span><br><span class="line">3. group 组件的列表名优先显示文章的 `short_title` 其次是 `title`。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup 宗门合影 2023-10-23 &#x27;/gallery/MC/&#x27; https://yin-qin.oss-cn-shanghai.aliyuncs.com/XiaoYao/202310261501300.jpg %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> Comment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> Templatet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HLSL语言基本知识</title>
      <link href="/2024/07/11/HLSL/"/>
      <url>/2024/07/11/HLSL/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Program </tag>
            
            <tag> HLSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础知识</title>
      <link href="/2024/07/11/C++++/"/>
      <url>/2024/07/11/C++++/</url>
      
        <content type="html"><![CDATA[<h1 id="C-基础知识"><a href="#C-基础知识" class="headerlink" title="C#基础知识"></a>C#基础知识</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>C#是微软公司发布的一种由C和C++衍生出来的面向对象的编程语言，它不仅去掉了 C++ 和 Java 语言中的一些复杂特性，还提供了可视化工具，能够高效地编写程序。</p></li><li><p>C#是由C和C++衍生出来的一种安全的、稳定的、简单的、优雅的面向对象编程语言。它在继承C和C++强大功能的同时去掉了一些它们的复杂特性（例如没有宏以及不允许多重继承）。</p></li><li>C#使得C++程序员可以高效的开发程序，且因可调用由 C/C++ 编写的本机原生函数，而绝不损失C/C++原有的强大的功能。因为这种继承关系，C#与C/C++具有极大的相似性，熟悉类似语言的开发者可以很快的转向C#。</li></ul><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">      Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//这是一个单行注释</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*这是一个多行注释</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;//a是一个变量</span><br></pre></td></tr></table></figure><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Obeject r = new Obejct();</span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><div class="table-container"><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>void</strong></td><td style="text-align:center">用作方法的返回类型，指定不返回值。</td></tr><tr><td style="text-align:center"><strong>const</strong></td><td style="text-align:center">指定字段或局部变量的值是常数，不能被修改。</td></tr><tr><td style="text-align:center"><strong>as</strong></td><td style="text-align:center">转换操作符，若转换失败返回null。</td></tr><tr><td style="text-align:center"><strong>private</strong></td><td style="text-align:center">访问修饰符，是允许访问的最低访问级别。</td></tr><tr><td style="text-align:center"><strong>public</strong></td><td style="text-align:center">访问修饰符，是允许访问的最高访问级别。</td></tr><tr><td style="text-align:center"><strong>internal</strong></td><td style="text-align:center">访问修饰符，允许在同一程序集的文件中内部类型和成员可以访问。</td></tr><tr><td style="text-align:center"><strong>protected</strong></td><td style="text-align:center">访问修饰符，允许在其所在类中可由派生类访问。</td></tr><tr><td style="text-align:center"><strong>try</strong></td><td style="text-align:center">异常处理代码块的组成部分，包括可能会抛出异常的代码。</td></tr><tr><td style="text-align:center"><strong>catch</strong></td><td style="text-align:center">定义一个代码块，在特定类型异常抛出时，执行块内代码。</td></tr><tr><td style="text-align:center"><strong>base</strong></td><td style="text-align:center">用于访问被派生类或构造中的同名成员隐藏的基类成员。</td></tr><tr><td style="text-align:center"><strong>abstract</strong></td><td style="text-align:center">标识一个可以扩展但不能被实体化的、必须被实现的类或方法。</td></tr><tr><td style="text-align:center"><strong>delegate</strong></td><td style="text-align:center">指定一个声明为一种委托类型，委托把方法封装为可调用实体，能在委托实体中调用。</td></tr><tr><td style="text-align:center"><strong>event</strong></td><td style="text-align:center">声明一个全新的事件。允许一个类或对象提供通知的成员，必须是委托类型。</td></tr><tr><td style="text-align:center"><strong>checked</strong></td><td style="text-align:center">确保编译器运行时，检查整数类型操作或转换时出现的溢出。</td></tr><tr><td style="text-align:center"><strong>unchecked</strong></td><td style="text-align:center">禁止溢出检查。</td></tr><tr><td style="text-align:center"><strong>enum</strong></td><td style="text-align:center">枚举类型，特殊的值类型。</td></tr><tr><td style="text-align:center"><strong>goto</strong></td><td style="text-align:center">跳转语句，将程序执行重定向到一个标签语句。</td></tr><tr><td style="text-align:center"><strong>foreach</strong></td><td style="text-align:center">遍历。</td></tr><tr><td style="text-align:center"><strong>namespace</strong></td><td style="text-align:center">定义一个逻辑组的类型和命名空间。</td></tr><tr><td style="text-align:center"><strong>ref</strong></td><td style="text-align:center">标识一个参数值可能会受影响的参数。</td></tr><tr><td style="text-align:center"><strong>struct</strong></td><td style="text-align:center">可以声明值类型。</td></tr><tr><td style="text-align:center"><strong>throw</strong></td><td style="text-align:center">抛出异常。</td></tr><tr><td style="text-align:center"><strong>typeof</strong></td><td style="text-align:center">操作符，返回传入参数的类型。</td></tr><tr><td style="text-align:center"><strong>virtual</strong></td><td style="text-align:center">标识可被覆载的方法。</td></tr><tr><td style="text-align:center"><strong>using</strong></td><td style="text-align:center">用于命名空间时，允许访问该命名空间中的类型而无需指定其全名。用于定义finalization操作的范围。</td></tr><tr><td style="text-align:center"><strong>static</strong></td><td style="text-align:center">声明静态变量或静态函数。</td></tr><tr><td style="text-align:center"><strong>extern</strong></td><td style="text-align:center">声明在外部实现的方法。</td></tr><tr><td style="text-align:center"><strong>object</strong></td><td style="text-align:center">所有类型都是直接或间接从Object继承的，可以将任何类型的值赋给object类型的变量。</td></tr><tr><td style="text-align:center"><strong>volatile</strong></td><td style="text-align:center">标识一个可被操作系统、某些硬件设备或并发线程修改的attribute。</td></tr><tr><td style="text-align:center"><strong>readonly</strong></td><td style="text-align:center">标识一个变量的值在初始化后不可修改。</td></tr><tr><td style="text-align:center"><strong>params</strong></td><td style="text-align:center">声明一个参数数组。</td></tr><tr><td style="text-align:center"><strong>operator</strong></td><td style="text-align:center">声明或多载一个操作符。</td></tr><tr><td style="text-align:center"><strong>interface</strong></td><td style="text-align:center">将一个声明指定为接口类型，即实现类或构造必须遵循的合同。</td></tr><tr><td style="text-align:center"><strong>out</strong></td><td style="text-align:center">标识一个参数值会受影响的参数，但在传入方法时，该参数无需先初始化。</td></tr><tr><td style="text-align:center"><strong>sizeof</strong></td><td style="text-align:center">操作符，以byte为单位返回一个值类型的长度。</td></tr><tr><td style="text-align:center"><strong>stackalloc</strong></td><td style="text-align:center">返回在堆上分配的一个内存块的指针。</td></tr><tr><td style="text-align:center"><strong>sealed</strong></td><td style="text-align:center">防止类型被派生，防止方法和property被覆载。在声明中使用可以防止该类被其他类继承。</td></tr><tr><td style="text-align:center"><strong>unsafe</strong></td><td style="text-align:center">标注包含指针操作的代码块、方法或类。</td></tr><tr><td style="text-align:center"><strong>override</strong></td><td style="text-align:center">在派生类中声明对虚方法的重载。</td></tr><tr><td style="text-align:center"><strong>implicit</strong></td><td style="text-align:center">定义一个用户定义的转换操作符。通常用来将预定义类型转换为用户定义类型或反向操作。隐式转换操作符必须在转换时使用。</td></tr><tr><td style="text-align:center"><strong>explicit</strong></td><td style="text-align:center">一个定义用户自定义转换操作符的操作符。通常用来将内建类型转换为用户定义类型或反向操作。必须在转换时调用显式转换操作符。</td></tr></tbody></table></div><h2 id="C-数据类型"><a href="#C-数据类型" class="headerlink" title="C#数据类型"></a>C#数据类型</h2><ul><li>值类型</li><li>引用类型</li><li>指针类型</li></ul><h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><p>值类型变量可以直接分配给一个值。它们是从类 System.ValueType 中派生的。</p><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">示意</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">Sbyte</td><td style="text-align:center">代表有符号的8位整数</td><td style="text-align:center">数值范围从-128 ～ 127</td></tr><tr><td style="text-align:center">Byte</td><td style="text-align:center">代表有符号的8位整数</td><td style="text-align:center">数值范围从0～255</td></tr><tr><td style="text-align:center">Short</td><td style="text-align:center">代表有符号的16位整数</td><td style="text-align:center">范围从-32768 ～ 32767</td></tr><tr><td style="text-align:center">ushort</td><td style="text-align:center">代表有符号的16位整数</td><td style="text-align:center">范围从0 到 65,535</td></tr><tr><td style="text-align:center">Int</td><td style="text-align:center">代表有符号的32位整数</td><td style="text-align:center">范围从-2147483648 ～ 2147483648</td></tr><tr><td style="text-align:center">uint</td><td style="text-align:center">代表有符号的32位整数</td><td style="text-align:center">范围从0 ～ 4294967295</td></tr><tr><td style="text-align:center">Long</td><td style="text-align:center">代表有符号的64位整数</td><td style="text-align:center">范围从-9223372036854775808 ～ 9223372036854775808</td></tr><tr><td style="text-align:center">Ulong</td><td style="text-align:center">代表有符号的64位整数</td><td style="text-align:center">范围从0 ～ 18446744073709551615</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">代表有符号的16位整数</td><td style="text-align:center">数值范围从0～65535</td></tr></tbody></table></div><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1.5<em>10 -45～3.4</em> 10 38</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">5.0<em>10 -324～1.7</em> 10 308</td></tr></tbody></table></div><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><h4 id="对象类型（Object）"><a href="#对象类型（Object）" class="headerlink" title="对象类型（Object）"></a>对象类型（Object）</h4><p>对象（Object）类型 是 C# 通用类型系统（Common Type System - CTS）中所有数据类型的终极基类。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p><h5 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h5><p>当一个值类型转换为对象类型时，则被称为<strong>装箱</strong>；另一方面，当一个对象类型转换为值类型时，则被称为<strong>拆箱</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//装箱：值类型转换为对象类型</span><br><span class="line">int val = 8;</span><br><span class="line">object obj = val;//整型数据转换为了对象类型（装箱）</span><br><span class="line"></span><br><span class="line">//拆箱：之前由值类型转换而来的对象类型再转回值类型</span><br><span class="line">int val = 8;</span><br><span class="line">object obj = val;//先装箱</span><br><span class="line">int nval = （int）obj;//再拆箱</span><br></pre></td></tr></table></figure><h4 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h4><p>您可以存储任何类型的值在<strong>动态数据类型</strong>变量中。这些变量的类型检查是在<strong>运行</strong>时发生的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//语法</span><br><span class="line">dynamic &lt;variable_name&gt; = value;</span><br><span class="line">//实例</span><br><span class="line">dynamic d = 20;</span><br></pre></td></tr></table></figure><h4 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h4><p>字符串（String）类型 允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。字符串（String）类型的值可以通过两种形式进行分配：引号和 @引号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//实例</span><br><span class="line">string str = &quot;runoob.com&quot;;</span><br><span class="line">//@转义</span><br><span class="line">string str = @&quot;C:\Windows&quot;;</span><br></pre></td></tr></table></figure><h4 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h4><p>指针类型变量存储另一种类型的内存地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//语法</span><br><span class="line">type* identifier;</span><br><span class="line">//实例</span><br><span class="line">char* cptr;</span><br><span class="line">int* iptr;</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li><strong>隐式类型转换</strong> ：这些转换是 C# 默认的以安全方式进行的转换, 不会导致数据丢失。例如，从小的整数类型转换为大的整数类型，从派生类转换为基类。</li><li><strong>显式类型转换</strong> ：显式类型转换，即强制类型转换。通过用户使用预定义的函数显式完成的，显式转换需要强制转换运算符，而且强制转换会造成数据丢失。转换类型的范围大小和从属关系和隐式转换相反。显式转换可能会导致数据出错，或者转换失败，甚至无法编译成功。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//隐式类型转换</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TypeConvertion</span></span><br><span class="line">&#123;   <span class="keyword">class</span> <span class="title">Class1</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Class2</span> : <span class="title">Class1</span> <span class="comment">//类Class2是类Class1的子类</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> inum = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">long</span> lnum = inum; <span class="comment">// 进行了隐式转换，将 int 型（数据范围小）数据转换为了 long 型（数据范围大）的数据</span></span><br><span class="line">            Class1 c1 = <span class="keyword">new</span> Class2(); <span class="comment">// 这里也是隐式转换，将一个新建的 Class2 实例转换为了其基类 Class1 类型的实例 C1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显式类型转换</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TypeConversionApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ExplicitConversion</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> d = <span class="number">5673.74</span>;</span><br><span class="line">            <span class="built_in">int</span> i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 强制转换 double 为 int</span></span><br><span class="line">            i = (<span class="built_in">int</span>)d;</span><br><span class="line">            Console.WriteLine(i);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//result 5673</span></span><br></pre></td></tr></table></figure><h2 id="C-运算符"><a href="#C-运算符" class="headerlink" title="C#运算符"></a>C#运算符</h2><h2 id="C-运算符-1"><a href="#C-运算符-1" class="headerlink" title="C#运算符"></a>C#运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+,-,*,/,%,++,--</span><br></pre></td></tr></table></figure><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==,!=,&gt;,&lt;,&gt;=,&lt;=</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;,||,!</span><br></pre></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;,|,^</span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=,+=,-=,*=,/=,&amp;=,&lt;&lt;=,&gt;&gt;=,&amp;=,^=,|=</span><br></pre></td></tr></table></figure><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sizeof(),typeof(),&amp;,*,? :,is.as</span><br></pre></td></tr></table></figure><h2 id="C-语法"><a href="#C-语法" class="headerlink" title="C#语法"></a>C#语法</h2><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><p>一个 if 语句 由一个布尔表达式后跟一个或多个语句组成。</p><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p>一个 switch 语句允许测试一个变量等于多个值时的情况。</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><h3 id="for-foreach循环"><a href="#for-foreach循环" class="headerlink" title="for/foreach循环"></a>for/foreach循环</h3><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do..while循环"></a>do..while循环</h3><h3 id="break循环控制"><a href="#break循环控制" class="headerlink" title="break循环控制"></a>break循环控制</h3><h3 id="continue循环控制"><a href="#continue循环控制" class="headerlink" title="continue循环控制"></a>continue循环控制</h3><h2 id="C-封装"><a href="#C-封装" class="headerlink" title="C#封装"></a>C#封装</h2><p><strong>封装</strong> 被定义为”把一个或多个项目封闭在一个物理的或者逻辑的包中”。在面向对象程序设计方法论中，封装是为了防止对实现细节的访问。</p><p>一个 访问修饰符 定义了一个类成员的范围和可见性。C# 支持的访问修饰符如下所示：</p><ul><li><p>public：所有对象都可以访问；</p></li><li><p>private：对象本身在对象内部可以访问；</p></li><li>protected：只有该类对象及其子类对象可以访问</li><li>internal：同一个程序集的对象可以访问；</li><li>protected internal：访问限于当前程序集或派生自包含类的类型。</li></ul><h2 id="C-方法"><a href="#C-方法" class="headerlink" title="C#方法"></a>C#方法</h2><p>一个<strong>方法</strong>是把一些相关的语句组织在一起，用来执行一个任务的语句块。</p><ul><li>定义方法</li><li>调用方法</li></ul><h3 id="C-数组"><a href="#C-数组" class="headerlink" title="C#数组"></a>C#数组</h3><p>数组是一个存储相同类型元素的固定大小的顺序集合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//初始化数组</span><br><span class="line">double[] balance = new double[10];</span><br><span class="line"></span><br><span class="line">//数组赋值</span><br><span class="line">double[] balance = new double[10];</span><br><span class="line">balance[0] = 4500.0;</span><br><span class="line">double[] balance = &#123; 2340.0, 4523.69, 3421.0&#125;;</span><br><span class="line">int [] marks = new int[5]  &#123; 99,  98, 92, 97, 95&#125;;</span><br><span class="line">int [] marks = new int[]  &#123; 99,  98, 92, 97, 95&#125;;</span><br><span class="line">int [] marks = new int[]  &#123; 99,  98, 92, 97, 95&#125;;</span><br><span class="line">int[] score = marks;</span><br></pre></td></tr></table></figure><h2 id="C-结构体"><a href="#C-结构体" class="headerlink" title="C#结构体"></a>C#结构体</h2><p>在 C# 中，结构体是<strong>值类型数据结构</strong>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Books</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> title;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> author;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> subject;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">int</span> book_id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用结构体</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">day01</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">struct</span> Books</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> title;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> author;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> subject;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> book_id;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Books Book1;</span><br><span class="line">            Book1.title = <span class="string">&quot;C programming&quot;</span>;</span><br><span class="line">            Book1.author = <span class="string">&quot;Nuha Ali&quot;</span>;</span><br><span class="line">            Book1.subject = <span class="string">&quot;C programming Tutorial&quot;</span>;</span><br><span class="line">            Book1.book_id = <span class="number">12345</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Book1 title:&#123;0&#125;&quot;</span>, Book1.title);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Book1 author:&#123;0&#125;&quot;</span>, Book1.author);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Book1 subject:&#123;0&#125;&quot;</span>, Book1.subject);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Book1 book_id:&#123;0&#125;&quot;</span>, Book1.book_id);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>结构可带有方法、字段、索引、属性、运算符方法和事件。</p></li><li><p>结构可定义构造函数，但不能定义析构函数。但是，您不能为结构定义无参构造函数。无参构造函数(默认)是自动定义的，且不能被改变。</p></li><li>与类不同，结构不能继承其他的结构或类。</li><li>结构不能作为其他结构或类的基础结构。</li><li>结构可实现一个或多个接口。</li><li>结构成员不能指定为 abstract、virtual 或 protected。</li><li>当您使用 New 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。与类不同，结构可以不使用 New 操作符即可被实例化。</li><li>如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用。</li></ul><h3 id="类-VS-结构"><a href="#类-VS-结构" class="headerlink" title="类 VS 结构"></a>类 VS 结构</h3><p>类和结构有以下几个基本的不同点：</p><ul><li>类是引用类型，结构是值类型。</li><li>结构不支持继承。</li><li>结构不能声明默认的构造函数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Program </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CG语言基本知识</title>
      <link href="/2024/07/11/CGshaderlab/"/>
      <url>/2024/07/11/CGshaderlab/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Program </tag>
            
            <tag> CG </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
